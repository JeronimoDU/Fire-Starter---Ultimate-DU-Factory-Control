{"slots":{"0":{"name":"slot1","type":{"events":[],"methods":[]}},"1":{"name":"slot2","type":{"events":[],"methods":[]}},"2":{"name":"slot3","type":{"events":[],"methods":[]}},"3":{"name":"slot4","type":{"events":[],"methods":[]}},"4":{"name":"slot5","type":{"events":[],"methods":[]}},"5":{"name":"slot6","type":{"events":[],"methods":[]}},"6":{"name":"slot7","type":{"events":[],"methods":[]}},"7":{"name":"slot8","type":{"events":[],"methods":[]}},"8":{"name":"slot9","type":{"events":[],"methods":[]}},"9":{"name":"slot10","type":{"events":[],"methods":[]}},"10":{"name":"slot11","type":{"events":[],"methods":[]}},"11":{"name":"slot12","type":{"events":[],"methods":[]}},"12":{"name":"slot13","type":{"events":[],"methods":[]}},"13":{"name":"slot14","type":{"events":[],"methods":[]}},"14":{"name":"slot15","type":{"events":[],"methods":[]}},"15":{"name":"slot16","type":{"events":[],"methods":[]}},"16":{"name":"slot17","type":{"events":[],"methods":[]}},"17":{"name":"slot18","type":{"events":[],"methods":[]}},"18":{"name":"slot19","type":{"events":[],"methods":[]}},"19":{"name":"slot20","type":{"events":[],"methods":[]}},"20":{"name":"slot21","type":{"events":[],"methods":[]}},"21":{"name":"slot22","type":{"events":[],"methods":[]}},"22":{"name":"slot23","type":{"events":[],"methods":[]}},"23":{"name":"slot24","type":{"events":[],"methods":[]}},"24":{"name":"slot25","type":{"events":[],"methods":[]}},"25":{"name":"slot26","type":{"events":[],"methods":[]}},"26":{"name":"slot27","type":{"events":[],"methods":[]}},"27":{"name":"slot28","type":{"events":[],"methods":[]}},"28":{"name":"slot29","type":{"events":[],"methods":[]}},"29":{"name":"slot30","type":{"events":[],"methods":[]}},"30":{"name":"slot31","type":{"events":[],"methods":[]}},"31":{"name":"slot32","type":{"events":[],"methods":[]}},"32":{"name":"debugScreen","type":{"events":[],"methods":[]}},"33":{"name":"slot34","type":{"events":[],"methods":[]}},"34":{"name":"slot35","type":{"events":[],"methods":[]}},"35":{"name":"slot36","type":{"events":[],"methods":[]}},"36":{"name":"slot37","type":{"events":[],"methods":[]}},"37":{"name":"slot38","type":{"events":[],"methods":[]}},"38":{"name":"slot39","type":{"events":[],"methods":[]}},"39":{"name":"slot40","type":{"events":[],"methods":[]}},"40":{"name":"slot41","type":{"events":[],"methods":[]}},"41":{"name":"slot42","type":{"events":[],"methods":[]}},"42":{"name":"slot43","type":{"events":[],"methods":[]}},"43":{"name":"slot44","type":{"events":[],"methods":[]}},"44":{"name":"slot45","type":{"events":[],"methods":[]}},"45":{"name":"slot46","type":{"events":[],"methods":[]}},"46":{"name":"slot47","type":{"events":[],"methods":[]}},"47":{"name":"slot48","type":{"events":[],"methods":[]}},"48":{"name":"slot49","type":{"events":[],"methods":[]}},"49":{"name":"slot50","type":{"events":[],"methods":[]}},"50":{"name":"slot51","type":{"events":[],"methods":[]}},"51":{"name":"slot52","type":{"events":[],"methods":[]}},"52":{"name":"slot53","type":{"events":[],"methods":[]}},"53":{"name":"slot54","type":{"events":[],"methods":[]}},"54":{"name":"slot55","type":{"events":[],"methods":[]}},"55":{"name":"slot56","type":{"events":[],"methods":[]}},"56":{"name":"slot57","type":{"events":[],"methods":[]}},"57":{"name":"slot58","type":{"events":[],"methods":[]}},"58":{"name":"slot59","type":{"events":[],"methods":[]}},"59":{"name":"slot60","type":{"events":[],"methods":[]}},"60":{"name":"slot61","type":{"events":[],"methods":[]}},"61":{"name":"slot62","type":{"events":[],"methods":[]}},"62":{"name":"slot63","type":{"events":[],"methods":[]}},"63":{"name":"slot64","type":{"events":[],"methods":[]}},"64":{"name":"slot65","type":{"events":[],"methods":[]}},"65":{"name":"slot66","type":{"events":[],"methods":[]}},"66":{"name":"slot67","type":{"events":[],"methods":[]}},"67":{"name":"slot68","type":{"events":[],"methods":[]}},"68":{"name":"slot69","type":{"events":[],"methods":[]}},"69":{"name":"slot70","type":{"events":[],"methods":[]}},"70":{"name":"slot71","type":{"events":[],"methods":[]}},"71":{"name":"slot72","type":{"events":[],"methods":[]}},"72":{"name":"slot73","type":{"events":[],"methods":[]}},"73":{"name":"slot74","type":{"events":[],"methods":[]}},"74":{"name":"slot75","type":{"events":[],"methods":[]}},"75":{"name":"slot76","type":{"events":[],"methods":[]}},"76":{"name":"slot77","type":{"events":[],"methods":[]}},"77":{"name":"slot78","type":{"events":[],"methods":[]}},"78":{"name":"slot79","type":{"events":[],"methods":[]}},"79":{"name":"slot80","type":{"events":[],"methods":[]}},"80":{"name":"slot81","type":{"events":[],"methods":[]}},"81":{"name":"slot82","type":{"events":[],"methods":[]}},"82":{"name":"slot83","type":{"events":[],"methods":[]}},"83":{"name":"slot84","type":{"events":[],"methods":[]}},"84":{"name":"slot85","type":{"events":[],"methods":[]}},"85":{"name":"slot86","type":{"events":[],"methods":[]}},"86":{"name":"slot87","type":{"events":[],"methods":[]}},"87":{"name":"slot88","type":{"events":[],"methods":[]}},"88":{"name":"slot89","type":{"events":[],"methods":[]}},"89":{"name":"slot90","type":{"events":[],"methods":[]}},"90":{"name":"slot91","type":{"events":[],"methods":[]}},"91":{"name":"slot92","type":{"events":[],"methods":[]}},"92":{"name":"slot93","type":{"events":[],"methods":[]}},"93":{"name":"slot94","type":{"events":[],"methods":[]}},"94":{"name":"slot95","type":{"events":[],"methods":[]}},"95":{"name":"slot96","type":{"events":[],"methods":[]}},"96":{"name":"slot97","type":{"events":[],"methods":[]}},"97":{"name":"slot98","type":{"events":[],"methods":[]}},"98":{"name":"slot99","type":{"events":[],"methods":[]}},"99":{"name":"slot100","type":{"events":[],"methods":[]}},"-1":{"name":"unit","type":{"events":[],"methods":[]}},"-3":{"name":"player","type":{"events":[],"methods":[]}},"-2":{"name":"construct","type":{"events":[],"methods":[]}},"-4":{"name":"system","type":{"events":[],"methods":[]}},"-5":{"name":"library","type":{"events":[],"methods":[]}}},"handlers":[{"code":"debug = false\nprint(\"unit start\",debug)\n\npreviousInput = \"\"\npreviousInfo = \"\"\nproducers = {}\nuploadSpeed = 0.001\nselectedIndus = {}\npinnedProd = {}\nselectedIndusIngredients = {}\ncommands = {}\nindustries = {}\nindusDetails = {}\nindusN = 0\ncontainers = {}\nci = 1\ncontainersLoading = true\n\nstep = 0\nunit.setTimer(\"onStartLoading\",0.1)\n\n\nprint(\"unit end\",debug)","filter":{"args":[],"signature":"onStart()","slotKey":"-1"},"key":"0"},{"code":"print(\"tick start\",debug)\n\nlocal iInfos = {}\nfor i, v in ipairs(indusDetails) do\n    for ii, vv in ipairs(indusDetails[v]) do\n        local slot = vv.slotName\n        local infos = industries[slot].getInfo()\n        local output = industries[slot].getOutputs()\n        iInfos[slot] = {s=infos.state, \n            output = output~=nil and output[1]~=nil and output[1].id~=nil and system.getItem(output[1].id).displayNameWithSize or nil}\n    end\nend\nlocal finalInput = \"\"\nlocal InfosInput = serialize(iInfos)\nprint(\"tick 1\",debug)\nlocal output = screen.getScriptOutput()\nif output ~= \"\" then\n    system.print(\"tick output:\"..tostring(output))\n    if output == \"load industries\" then\n        print(\"tick load indus\",debug)\n        PB:sendLongMessage(serialize(indusDetails))\n        unit.stopTimer(\"tick\")\n        unit.setTimer(\"upload\",uploadSpeed)\n        goto skipAll\n    elseif output == \"load infos\" then\n        print(\"tick load infos\",debug)\n        PB:sendLongMessage(InfosInput)\n        unit.stopTimer(\"tick\")\n        unit.setTimer(\"upload\",uploadSpeed)\n        previousInfo = InfosInput\n        goto skipAll\n    elseif output == \"load elements\" then\n        print(\"tick load elements\",debug)\n        PB:sendLongMessage(serialize(allRecipesDetailed))\n        unit.stopTimer(\"tick\")\n        unit.setTimer(\"upload\",uploadSpeed)\n        goto skipAll\n\n    elseif deserialize(output) and type(deserialize(output)) == \"table\" then\n        print(\"tick output =  table\",debug)\n        local data = deserialize(output)\n        if data.prodId then\n            if data.prodId ~= 0 then\n                local details = system.getItem(data.prodId)\n                local recipe = system.getRecipes(data.prodId)\n                local ing = {}\n                for i, v in ipairs(recipe[1].ingredients) do\n                    ing[#ing+1] = {dNWS = system.getItem(v.id).displayNameWithSize, quantity = v.quantity}\n                end\n                local prodInput = {\n                    prodDetails = {\n                        id = details.id,\n                        dNWS = details.displayNameWithSize:gsub('\"', '*'),\n                        iP = details.iconPath,\n                        desc = details.description,\n                        producers = recipe[1].producers,\n                        ingredients = ing,\n                        --time = convertSeconds(recipe[1].time),\n                    }}\n                finalInput = serialize(prodInput)\n                print(prodInput,debug)\n            elseif data.indusSlot then\n                selectedIndus = industries[data.indusSlot]\n            else\n                producers = {}\n                finalInput = serialize({indusShow=producers})\n            end\n        elseif data.indusCommand then\n            local indusSlot = data.indusCommand.indus\n            local prod = data.indusCommand.prod\n            if data.indusCommand.command == \">set product<\" then\n                industries[indusSlot].stop(true,false)\n                industries[indusSlot].setOutput(prod)\n                \n            elseif data.indusCommand.command == \"startN\" then\n                --industries[indusSlot].setOutput(prod)\n                local q = data.indusCommand.sQuantity\n                if q == 0 then\n                    industries[indusSlot].startRun()\n                else\n                    industries[indusSlot].startFor(q)\n                end\n            elseif data.indusCommand.command == \"maintain\" then\n                --industries[indusSlot].setOutput(prod)\n                industries[indusSlot].startMaintain(data.indusCommand.mQuantity)\n            elseif data.indusCommand.command == \"stop\" then\n                industries[indusSlot].stop(true,false)\n            end\n            screen.clearScriptOutput()\n        elseif data.indusSlot then\n            if data.indusSlot ~= \"\" then\n                selectedIndus = industries[data.indusSlot]\n                \n                if selectedIndus.getInfo and selectedIndus.getInfo().currentProducts[1] then\n                    local prodId = selectedIndus.getInfo().currentProducts[1].id\n                    local details = system.getItem(prodId)\n                    local recipe = system.getRecipes(prodId)\n                    local ing = {n = details.displayNameWithSize, iP = details.iconPath}\n                    for i, v in ipairs(recipe[1].ingredients) do\n                        ing[i] = {n = system.getItem(v.id).displayNameWithSize, q = v.quantity}\n                    end\n                    selectedIndusIngredients = ing\n                else\n                    selectedIndus = {}\n                    selectedIndusIngredients = {}\n                end\n                \n                local sPos = industries[data.indusSlot].getPosition()\n\n                local bbc = industries[data.indusSlot].getBoundingBoxCenter()\n                local sPosF = industries[data.indusSlot].getForward()\n                local bbs = industries[data.indusSlot].getBoundingBoxSize()\n                sPosx, sPosy, sPosz = sPos[1]-sPosF[1]*((bbs[2]/2)+0.75), sPos[2]-sPosF[2]*((bbs[2]/2)+0.75), sPos[3]+0.5\n                if core and not sticker then sticker = core.spawnArrowSticker(sPosx, sPosy, sPosz,\"down\") end\n            else\n                selectedIndus = {}\n                selectedIndusIngredients = {}\n                if core and sticker then core.deleteSticker(sticker) sticker = nil end\n            end\n            if data.pinnedProd and data.pinnedProd.dNWS then\n                local recipe = system.getRecipes(data.pinnedProd.id)\n                local ing = {n = data.pinnedProd.dNWS, iP = data.pinnedProd.iP}\n                for i, v in ipairs(recipe[1].ingredients) do\n                    ing[i] = {n = system.getItem(v.id).displayNameWithSize, q = v.quantity}\n                end\n                pinnedProd = ing\n            else\n                pinnedProd = {}\n            end\n            init2()\n        end\n    else\n\n    end\nelse\n    if previousInfo ~= InfosInput then\n        print(InfosInput,debug)\n        finalInput = serialize('update infos')\n        previousInfo = InfosInput\n    else\n        finalInput = serialize({mw=mouseWheel})\n    end\nend\n::skipAll::\n\n\nif #commands > 0 then\n    local luaTextInput = \"\"\n    if commands[1] == \"find\" or commands[1] == \"search\" then\n        if commands[2] then\n            luaTextInput = serialize({prodFilter = commands[2]})\n        end\n    elseif commands[1] == \"start\" then\n        if commands[2] and tonumber(commands[2]) then\n            luaTextInput = serialize({indusStart = tonumber(commands[2])})\n        end\n\n    elseif commands[1] == \"maintain\" then\n        if commands[2] and tonumber(commands[2]) then\n            luaTextInput = serialize({indusMaintain = tonumber(commands[2])})\n        end\n\n    elseif commands[1] == \"stop\" then\n\n    end\n    if luaTextInput ~= \"\" then\n        finalInput = luaTextInput\n        commands = {}\n    end\nend\n\nscreen.setScriptInput(finalInput)\nscreen.clearScriptOutput()\n\nprint(\"tick end\",debug)","filter":{"args":[{"value":"tick"}],"signature":"onTimer(tag)","slotKey":"-1"},"key":"1"},{"code":"print(\"tick uppload start\",debug)\nPB:processMessage()\nscreen.clearScriptOutput()\nprint(\"tick uppload end\",debug)","filter":{"args":[{"value":"upload"}],"signature":"onTimer(tag)","slotKey":"-1"},"key":"2"},{"code":"screen.clearScriptOutput()\nscreen.setScriptInput(\"\")\n--screen.setRenderScript(\"--\")\n--screen.clear()\n\n--debugScreen.setRenderScript(string.sub(serialize(allRecipesDetailed),1,49000))\n\nprint(\"unit onStop end\",debug)","filter":{"args":[],"signature":"onStop()","slotKey":"-1"},"key":"3"},{"code":"if containers[1] then\n    system.print(\"Refreshing container: \"..ci)\n    if timer then timer = tonumber(containers[ci].updateContent()) end\n    \n    if not timer or timer == 0 then\n        uppdateContainersItems(ci)\n        system.print(\"Containers ores: \"..#containersItems[1])\n        system.print(\"Containers pures: \"..#containersItems[2])\n        system.print(\"Containers products: \"..#containersItems[3])\n        system.print(\"Containers parts: \"..#containersItems[4])\n        ci = ci < #containers and ci + 1 or 1\n        timer = tonumber(containers[ci].updateContent())\n    end\n    system.print(\"Containers tick: \"..math.ceil(timer)..\"sec\")\n    unit.setTimer(\"containers\",timer+1)\n    \nend","filter":{"args":[{"value":"containers"}],"signature":"onTimer(tag)","slotKey":"-1"},"key":"4"},{"code":"if step then\n    step = step + 1\n    if step == 1 then\n        for _,slot in pairs(unit)do -- checking elements in slots\n            if type(slot)==\"table\"and type(slot.export)==\"table\"then\n                if slot.getClass then\n                    if slot.getClass()==\"ScreenUnit\" then\n                        if slot.getName() == \"screen1\" then \n                            screen=slot\n                            slot.activate()\n                            slot.clearScriptOutput()\n                        elseif slot.getName() == \"screen2\" then \n                            screenHub=slot\n                            slot.activate()\n                            slot.clearScriptOutput()\n                        end\n                    elseif string.find(slot.getClass(),\"Core\") then\n                        core=slot\n                    elseif string.find(slot.getClass(),\"Industry\") then\n                        industries[slot.getName():gsub(\"[%[%]%s]\", \"\")] = slot\n                        local id = slot.getItemId()\n                        local item = system.getItem(id)\n                        local size = item.displayNameWithSize:match(\"%w+$\")\n                        local iType = item.displayName:gsub(\"^%S+%s*\", \"\")\n                        if size == \"xs\" then size = 1\n                        elseif size == \"s\" then size = 2\n                        elseif size == \"m\" then size = 3\n                        elseif size == \"l\" then size = 4\n                        elseif size == \"xl\" then size = 5\n                        end\n                        local tName = iType:gsub(\"3D\", \"ED\"):gsub(\"%s+\", \"_\"):gsub(\"y$\", \"ie\"):lower()..\"s\"\n                        if not indusDetails[tName] then\n                            indusDetails[tName] = {maximized=true,icon=item.iconPath}\n                            table.insert(indusDetails, tName)\n                        end\n                        table.insert(indusDetails[tName], {id=id, slotName=slot.getName():gsub(\"[%[%]%s]\", \"\"), name=slot.getName(), itemName=item.name, size=size, tier=item.tier, iType=iType})\n                        indusN = indusN+1\n\n                    elseif string.find(slot.getClass():lower(),\"container\") then\n                        containers[#containers+1] = slot\n                    end \n                end \n            end \n        end\n        --for i, v in ipairs(containers) do\n        --    print(i..\": \"..v.updateContent())\n        --end\n        --step = nil\n    elseif step == 2 then\n        for k, v in pairs(indusDetails) do\n            if type(v) == \"table\" then\n                table.sort(indusDetails[k], function(a, b) if a.tier == b.tier then if a.size == b.size then return a.name < b.name else return a.size < b.size end else return a.tier < b.tier end end)\n            end\n        end\n        table.sort(indusDetails)\n        indusDetails.indusN = indusN\n\n    elseif step == 3 then\n        cleanedC = cleanEntry({displayNameWithSize = \"Consumable\", max = false, \n                childIds = {[1]=1244665116,[2]=1344403201,[3]=4212467699,[4]=1235359659}},true)\n\n    elseif step == 4 then\n        cleanedE = cleanEntry({displayNameWithSize = \"Elements\", max = false, \n                childIds = {[1]=3480514136,[2]=500121004}},true)\n\n    elseif step == 5 then\n        cleanedH = cleanEntry({displayNameWithSize = \"Honeycombs\", max = false, \n                childIds = {[1]=3992092945,[2]=3091506661}},true)\n\n    elseif step == 6 then\n        cleanedP = cleanEntry({displayNameWithSize = \"Parts\", max = false, \n                childIds = {[1]=3972581354,[2]=137961058,[3]=1641399418,[4]=2265428737,[5]=504133814}},true)\n\n    elseif step == 7 then\n        cleanedM = cleanEntry({displayNameWithSize = \"Material\", max = false, \n                childIds = {[1]=1161217162, [2]=3465017154, [3]=3433387587}},true)   \n\n    elseif step == 8 then\n        allRecipesDetailed = {[1] = {\n                dNWS = \"Base Items\",\n                max = true,\n                childs = {\n                    [1] = cleanedC,\n                    [2] = cleanedE,\n                    [3] = cleanedH,\n                    [4] = cleanedP,\n                    [5] = cleanedM,\n                }}}\n        allRecipesDetailed[1].childs = sortBranches(allRecipesDetailed[1].childs)\n\n    elseif step == 9 then\n        if containers[1] and screenHub then\n            scp = serialize(cleanedP)\n            print(\"Containers found: \"..#containers)\n            print(containers[1].updateContent()..\"sec\")\n            screenHub.clearScriptOutput()\n            --uppdateContainersItems()\n            init2()\n            unit.setTimer(\"containers\",0.001)\n        end\n\n    elseif step == 10 then\n        init1()\n        screen.clearScriptOutput()\n        screen.setRenderScript(SC1)\n\n        unit.setTimer(\"tick\",0.1)\n        sPosx, sPosy, sPosz = 0, 0, 0\n        if core then sticker = core.spawnArrowSticker(0,0,50,\"down\") end\n        step = nil\n\n        unit.stopTimer(\"onStartLoading\")\n\n    end\n\nelse\n    unit.stopTimer(\"onStartLoading\")\n\nend","filter":{"args":[{"value":"onStartLoading"}],"signature":"onTimer(tag)","slotKey":"-1"},"key":"5"},{"code":"mouseWheel = system.getMouseWheel()\n\nif screenHub then screenHub.setScriptInput(serialize({mw=mouseWheel})) end\n\nif core and sticker and sPosx then\n    bz = bz~=nil and bz > 0 and bz-0.05 or 2\n    core.moveSticker(sticker,sPosx, sPosy, sPosz+bz)\n    local function calculateAngleXY(x, y)\n        local angleRadians = math.atan(y, x)\n        local angleDegrees = math.deg(angleRadians)\n        if angleDegrees < 0 then\n            angleDegrees = angleDegrees + 360\n        end\n        return angleDegrees+90\n    end\n    local mPP = player.getPosition()\n    local mPPx, mPPy = mPP[1], mPP[2]\n    local rz = calculateAngleXY(mPPx-sPosx, mPPy-sPosy)\n    core.rotateSticker(sticker,0,0,rz)\nend","filter":{"args":[],"signature":"onUpdate()","slotKey":"-4"},"key":"6"},{"code":"\n\nprint(text)\n\nlocal function splitString(inputStr, delimiter)\n    local result = {}\n    for match in (inputStr..delimiter):gmatch(\"(.-)\"..delimiter) do\n        table.insert(result, match)\n    end\n    return result\nend\ncommands = splitString(text:lower(), \" \")\nfor i, v in ipairs(commands) do\n    print(v)\nend\n","filter":{"args":[{"variable":"*"}],"signature":"onInputText(text)","slotKey":"-4"},"key":"7"},{"code":"init1 = function()\nSC1 = [[\n---------------------------------------------------------------\n--BEGINING OF CUSTOM LIBRARIES CODE\n---------------------------------------------------------------\nfunction addWrappedText(a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p)local rx,ry=getResolution()local q,r=d[1]or 0,d[2]or 0;function wrapText()maxWidth=e or rx*0.9;local s,u,v={},{},0;for w in c:gmatch(\"([^\\n]*)\\n?\")do s[#s+1]={}for x in w:gmatch(\"%S+\")do u=s[#s]local y=#u==0 and x or' '..x;local z,A=getTextBounds(b,y)if v+z<maxWidth then u[#u+1]=y;v=v+z else s[#s]=table.concat(u)s[#s+1]={x}v=getTextBounds(b,x)u=nil end end;s[#s]=table.concat(s[#s])v=0 end;return s end;local B=getFontSize(b)local C=B+2;local D=wrapText()local E=r+C;for F,u in ipairs(D)do setNextStrokeWidth(a,f)setNextStrokeColor(a,g,h,i,j)setNextFillColor(a,k,l,m,n)setNextTextAlign(a,o,p)addText(a,b,u,q,E)E=E+C end end;\n\nfunction setNextAllShapesStroke(a,f,H,I,J,K)setNextStrokeColor(a,H,I,J,K)setNextStrokeWidth(a,f)end;\n\nfunction setNextAllShapesFill(a,H,I,J,K)setNextFillColor(a,H,I,J,K)end;\n\nfunction setNextAllText(a,f,g,h,i,j,k,l,m,n,o,p)setNextStrokeWidth(a,f)setNextStrokeColor(a,g,h,i,j)setNextFillColor(a,k,l,m,n)setNextTextAlign(a,o,p)end;\n\nfunction setDefaultAllShapesStroke(a,f,H,I,J,K)setDefaultStrokeColor(a,Shape_Line,H,I,J,K)setDefaultStrokeWidth(a,Shape_Line,f)setDefaultStrokeColor(a,Shape_Bezier,H,I,J,K)setDefaultStrokeWidth(a,Shape_Bezier,f)setDefaultStrokeColor(a,Shape_Circle,H,I,J,K)setDefaultStrokeWidth(a,Shape_Circle,f)setDefaultStrokeColor(a,Shape_BoxRounded,H,I,J,K)setDefaultStrokeWidth(a,Shape_BoxRounded,f)setDefaultStrokeColor(a,Shape_Polygon,H,I,J,K)setDefaultStrokeWidth(a,Shape_Polygon,f)end;\n\nfunction setDefaultAllShapesFill(a,H,I,J,K)setDefaultFillColor(a,Shape_Line,H,I,J,K)setDefaultFillColor(a,Shape_Bezier,H,I,J,K)setDefaultFillColor(a,Shape_Circle,H,I,J,K)setDefaultFillColor(a,Shape_BoxRounded,H,I,J,K)setDefaultFillColor(a,Shape_Polygon,H,I,J,K)end;\n\nfunction setDefaultAllText(a,f,g,h,i,j,k,l,m,n,o,p)setDefaultStrokeWidth(a,Shape_Text,f)setDefaultStrokeColor(a,Shape_Text,g,h,i,j)setDefaultFillColor(a,Shape_Text,k,l,m,n)setDefaultTextAlign(a,o,p)end;\n\nfunction addButton(a,ay,az,b,aA,G,aB,aC,aD,c,aE,aF,aa)ay=ay or a;az=az or a;if type(aa)==\"function\"then aa()end;if isCursorIn(aA,G,aA+aB,G+aC)then a=ay;if getCursorDown()then a=az;if aF then if type(aF)==\"function\"then aF()else registerOutput(tostring(aF))end end end;if getCursorPressed()then if aE then if type(aE)==\"function\"then aE()else registerOutput(tostring(aE))end end end end;addBoxRounded(a,aA,G,aB,aC,aD)if c then addText(a,b,c,aA+aB/2,G+aC/2)end end;\n\nfunction addButtonText(a,ay,az,b,aA,G,aB,aC,aD,c,aE,aF,aa)ay=ay or a;az=az or a;if type(aa)==\"function\"then aa()end;if isCursorIn(aA,G,aA+aB,G+aC,500)then a=ay;if getCursorDown()then a=az;if aF then if type(aF)==\"function\"then aF()else registerOutput(tostring(aF))end end end;if getCursorPressed()then if aE then if type(aE)==\"function\"then aE()else registerOutput(tostring(aE))end end end end;\n--addBoxRounded(a,aA,G,aB,aC,aD)\nif c then addText(a,b,c,aA,G+aC/2)end end;\n\nfunction addGif(a,aJ,aK,aL,e,a9,aM,D,aN,aO)local aP=tostring(\"id\"..tostring(a)..tostring(aJ)..aK..aL..e..a9)if giffInit==nil then giffInit={id={currentFrame=0}}end;if not giffInit[aP]then giffInit[aP]={currentFrame=0}end;local aQ=giffInit[aP]local aR=2;local aS=aM*D-aR;c_line=c_line or 0;c_column=c_column or 0;local aT,aU=getImageSize(aJ)local aV,aW=aT/aM,aU/D;local function aX()if aO=='horizontal'then c_line=math.floor(aQ.currentFrame)<aS and math.floor(aQ.currentFrame)/aM or D-1;c_column=math.floor(aQ.currentFrame)<aS and(c_line-math.floor(c_line))*aM or aM-aR-1 else c_column=aQ.currentFrame/D;c_line=c_column-math.floor(c_column)*D-1 end;c_line=math.floor(c_line)c_column=c_column end;aX()addImageSub(a,aJ,aK,aL,e,a9,aV*c_column,aW*c_line,aV,aW)if aQ.currentFrame<aS then aQ.currentFrame=aQ.currentFrame+aN*getDeltaTime()*20 else aQ.currentFrame=0 end end;\n\nfunction isCursorIn(Y,Z,_,a0,maxY)local cx,cy=getCursor() if cx>0 and cy>0 then if maxY and cy>maxY then return false elseif cx>=Y and cx<=_ and cy>=Z and cy<=a0 then return true else return false end else return false end end;\n\n--local a=table.concat;local function b(table,c,d)d[c]=\"{\"c=c+1;local e=false;for f,g in pairs(table)do e=true;local h=type(f)if h==\"string\"then d[c]=f..\"=\"elseif h==\"number\"then d[c]=\"[\"..f..\"]=\"elseif h==\"boolean\"then d[c]=\"[\"..tostring(f)..\"]=\"else d[c]=\"notsupported=\"end;c=c+1;local i=type(g)if i==\"table\"then c=b(g,c,d)elseif i==\"string\"then d[c]='\"'..g..'\"'elseif i==\"number\"then d[c]=g elseif i==\"boolean\"then d[c]=tostring(g)else d[c]='\"Not Supported\"'end;d[c+1]=\",\"c=c+2 end;if e then c=c-1 end;d[c]=\"}\"return c end;function serialize(g)local d={}local i=type(g)if i==\"table\"then b(g,1,d)elseif i==\"string\"then return'\"'..g..'\"'elseif i==\"number\"then return g elseif i==\"boolean\"then return tostring(g)else return'\"Not Supported\"'end;return a(d)end;function deserialize(j)if j==nil then return nil else return load(\"return \"..j)()or nil end end\n\noutputQueue = {}\nfunction registerOutput(str, priority)\n    priority = priority or 99\n    table.insert(outputQueue, {str = str, priority = priority})\nend\n\nfunction setHighestPriorityOutput()\n    if #outputQueue == 0 then\n        return\n    end\n    table.sort(outputQueue, function(a, b) return a.priority < b.priority end)\n    setOutput(outputQueue[1].str)\n    outputQueue = {}\nend\n\nlocal concat = table.concat\nlocal function internalSerialize(table, tC, t)\n    t[tC] = \"{\"\n    tC = tC + 1\n    local hasValue = false\n    for key, value in pairs(table) do\n        hasValue = true\n        local keyType = type(key)\n        if keyType == \"string\" then\n            t[tC] = key .. \"=\"\n        elseif keyType == \"number\" then\n            t[tC] = \"[\" .. key .. \"]=\"\n        elseif keyType == \"boolean\" then\n            t[tC] = \"[\" .. tostring(key) .. \"]=\"\n        else\n            t[tC] = \"notsupported=\"\n        end\n        tC = tC + 1\n\n        local check = type(value)\n        if check == \"table\" then\n            tC = internalSerialize(value, tC, t)\n        elseif check == \"string\" then\n            t[tC] = '\"' .. value .. '\"'\n        elseif check == \"number\" then\n            t[tC] = value\n        elseif check == \"boolean\" then\n            t[tC] = tostring(value)\n        else\n            t[tC] = '\"Not Supported\"'\n        end\n        t[tC + 1] = \",\"\n        tC = tC + 2\n    end\n    if hasValue then\n        tC = tC - 1\n    end\n    t[tC] = \"}\"\n    return tC\nend\n\nfunction serialize(value)\n    local t = {}\n    local check = type(value)\n\n    if check == \"table\" then\n        internalSerialize(value, 1, t)\n    elseif check == \"string\" then\n        return '\"' .. value .. '\"'\n    elseif check == \"number\" then\n        return value\n    elseif check == \"boolean\" then\n        return tostring(value)\n    else\n        return '\"Not Supported\"'\n    end\n\n    return concat(t)\nend\n\nfunction deserialize(s)\n    if s == nil then\n        return nil\n    else\n        local func, err = load(\"return \" .. s)\n        if func then\n            local success, result = pcall(func)\n            if success then\n                return result\n            else\n                registerOutput(\"Error executing function: \" .. tostring(result),0)\n                return nil\n            end\n        else\n            registerOutput(\"Error loading string: \" .. tostring(err),0)\n            return nil\n        end\n    end\nend\n\nfunction findInTable(t, vf)\n    if not t or #t == 0 then return true end\n    for _, v in ipairs(t) do\n        if v == vf then\n            return true\n        end\n    end\n    return false\nend\n\nfunction deep_copy(t)\n    if type(t) ~= \"table\" then\n        return t\n    end\n    local t2 = {}\n    for k, v in pairs(t) do\n        t2[k] = deep_copy(v)\n    end\n    return t2\nend\n\nShape_Bezier = 0\nShape_Box = 1\nShape_BoxRounded = 2\nShape_Circle = 3\nShape_Image = 4\nShape_Line = 5\nShape_Polygon = 6\nShape_Text = 7\nShape_PolyLine = 5\nShape_PolyLineFill = 6\n\n\n\n-- END OF PROXY CODE AND LIBRARIES --\n-------------------------------------\n-- BEGINING OF YOUR CODE           --\n\n-- MASTER LAYER --\n-- GROUP: LOADFONT\ntittle_big = loadFont('Montserrat', 22.0)\ntittle_small = loadFont('Montserrat', 18.0)\ntext_big = loadFont('Montserrat', 16.0)\ntext_small = loadFont('Montserrat', 12)\ntext_tiny = loadFont('Montserrat', 9)\nloading_big = loadFont('Play', 100)\n\n-- GROUP: LOADIMAGE \n--hub = loadImage('assets.prod.novaquark.com/66035/7edb7051-d34a-41da-a100-ba924edc8faf.png') \nlogo = loadImage('assets.prod.novaquark.com/91318/c108c8f6-c2a2-41d3-b1ab-03fc9b86c8b4.png')\n \n-- GROUP: BACKGROUND \nsetBackgroundColor(0.050980392156863,0.094117647058824,0.10980392156863,1,0.5)\n\n-- GROUP: HEADER1 \nif not init then\n    init = true\n    json = require('dkjson')\n    rx, ry = getResolution()\n    --indusList = {}\n    --iInfos = {}\n    --itemsDetails = {}\n    t1y = 0\n    t2y = 0\n    srollSpeed = 50\n\n    selectedIndus = {}\n    selectedProd = {}\n    pinnedProd = {}\n    indusFilter = {}\n    slotName = \"\"\n    \n    indusStartN = 0\n    indusMaintainN = 5000\n    \n    downloader = {}\n    downloader.receivedChunks = {}\n    downloader.receiving = false\n    downloader.totalChunks = 0\n    downloader.loadingMsg = \"\"\n    downloader.previousChunk = \"\"\nend\n\nfunction downloader:receiveLongMessage()\n    local message = getInput()\n    if message then\n        if string.find(message,\"START\") then\n            self.loadingMsg = \"LOADING...\"\n            self.receiving = true\n            self.receivedChunks = {}\n            self.totalChunks = tonumber(message:match(\"(%w+)%s*$\"))\n            registerOutput(message,1)\n        elseif message == \"END\" then\n            --registerOutput(message,3)\n            self.receiving = false\n            local fullMessage = table.concat(self.receivedChunks)\n            self.receivedChunks = {}\n            self.totalChunks = 0\n            self.loadingMsg = \"\"\n            self.previousChunk = \"\"\n            return fullMessage\n        elseif self.receiving == true and downloader.previousChunk ~= message then\n            table.insert(self.receivedChunks, message)\n            self.loadingMsg = tostring(math.ceil(#self.receivedChunks/self.totalChunks*100))..\"%\"\n            downloader.previousChunk = message\n            registerOutput(message,1)\n        end\n    end\n    return \"pending\"\nend\n\nif indusList == nil then\n    local dataLoad = downloader:receiveLongMessage()\n    indusList = dataLoad ~= \"pending\" and deserialize(dataLoad) or nil\n    --indusList = dataLoad ~= \"pending\" and json.decode(dataLoad) or nil\n    if indusList == nil and downloader.receiving == false then registerOutput(\"load industries\",2) end\n    \nelseif iInfos == nil then\n    local dataLoad = downloader:receiveLongMessage()\n    iInfos = dataLoad ~= \"pending\" and deserialize(dataLoad) or nil\n    if iInfos == nil and downloader.receiving == false then \n        registerOutput(\"load infos\",2) \n    else \n        if iInfos and selectedIndus.id then \n            registerOutput(serialize({indusSlot = slotName}))\n        end\n    end\n    \nelseif itemsDetails == nil then\n    local dataLoad = downloader:receiveLongMessage()\n    itemsDetails = dataLoad ~= \"pending\" and deserialize(dataLoad) or nil\n    if itemsDetails == nil and downloader.receiving == false then registerOutput(\"load elements\",2) end\n\nend\n\n\nclick = getCursorDown()\ncx, cy = getCursor()\n\nif downloader.receiving == false then\n    local input = getInput()\n    if input then\n        dInput = deserialize(input)\n        if type(dInput) == \"table\" then\n            if dInput.mw and cx > 0 and cy > 0 then\n                if cx < 450 then t1y = t1y+dInput.mw*srollSpeed <= 0 and t1y+dInput.mw*srollSpeed or t1y \n                elseif cx > 460 then t2y = t2y+dInput.mw*srollSpeed <= 0 and t2y+dInput.mw*srollSpeed or t2y \n                end\n            end\n            if dInput.prodDetails then\n                selectedProd = dInput.prodDetails\n                indusFilter = dInput.prodDetails.producers\n                t1y = 0\n            end\n            if dInput.prodFilter then\n                if dInput.prodFilter == \"clear\" then\n                    selectedProd = {}\n                    prodFilter = nil\n                    t2y = 0\n                else\n                    prodFilter = dInput.prodFilter\n                    selectedProd = {}\n                    t2y = 0\n                end\n            end\n            if dInput.indusStart then\n                indusStartN = dInput.indusStart\n            elseif dInput.indusMaintain then\n                indusMaintainN = dInput.indusMaintain\n            end\n        else\n            if dInput == \"update infos\" then\n                iInfos = nil\n            elseif dInput == \"update indus\" then\n                indusList = nil\n            elseif dInput == \"update elements\" then\n                itemsDetails = nil\n            end\n        end\n    end\nend\n---------------------------\n-- LAYER: animated_logo--\nanimated_logo = createLayer()\naddGif(animated_logo, logo, 921,505, 100.0, 100.0, '10.0', '18', '1', 'horizontal')\n\n\n---------------------------\n-- LAYER: background--\nbackground = createLayer()\nsetDefaultAllShapesStroke(background, 0.0, 0.0, 0.0, 0.0, 0) \nsetDefaultAllShapesFill(background, 0.025490196078431, 0.047058823529412, 0.054901960784314, 1)\n\naddBoxRounded(background, 10,10, 450.0, 30.0, 0.0)  --left tittle box\naddBoxRounded(background, 470,10, 540.0, 30.0, 0.0)  --right tittle box\n\nsetNextAllShapesFill(background, 0.066666666666667, 0.11176470588235, 0.14117647058824, 1) \naddBoxRounded(background, 10,50, 450.0, 450.0, 0.0) --left background box\n\nsetNextAllShapesFill(background, 0.066666666666667, 0.11176470588235, 0.14117647058824, 1) \naddBoxRounded(background, 470,50, 540.0, 100.0, 0.0) --right background box\nsetNextAllShapesFill(background, 0.066666666666667, 0.11176470588235, 0.14117647058824, 1)\naddBoxRounded(background, 470,160, 540.0, 340.0, 0.0) --right background box\n\naddBoxRounded(background, 10,510, 100.0, 100.0, 0.0) --left pic box\naddBoxRounded(background, 470,50, 100.0, 100.0, 0.0) --right pic box\naddBoxRounded(background, 470,510, 100.0, 100.0, 0.0) --right pic box\n\n\n---------------------------\n-- LAYER: tittles--\ntittles = createLayer()\nsetDefaultAllText(tittles, 0.0, 0.0, 0.0, 0.0, 0, 1.0, 1.0, 1.0, 1, AlignH_Left, AlignV_Baseline)\n\nlocal ni = type(indusList) == \"table\" and indusList.indusN or \"unknown\"\naddText(tittles, tittle_big, 'Connected Industries: '..ni, 20,35) \naddText(tittles, tittle_big, 'Products', 480,35)\naddText(tittles, text_big, '| Filter: '..tostring(prodFilter), 700,35)\n\n\n---------------------------\n-- LAYER: bt_hover--     \nbt_hover = createLayer()\nsetDefaultAllShapesFill(bt_hover, 0.0, 0.0, 0.0, 0) \nsetDefaultAllShapesStroke(bt_hover, 1.0, 0.49019607843137, 0.4156862745098, 0.23921568627451, 1) \nsetDefaultAllText(bt_hover, 0.0, 0.0, 0.0, 0.0, 0, 0.49019607843137, 0.4156862745098, 0.23921568627451, 1, AlignH_Center, AlignV_Middle)\n---------------------------\n-- LAYER: bt_click--\nbt_click = createLayer()\nsetDefaultAllShapesFill(bt_click, 0.0, 0.0, 0.0, 0) \nsetDefaultAllShapesStroke(bt_click, 4.0, 0.49019607843137, 0.4156862745098, 0.23921568627451, 1) \nsetDefaultAllText(bt_click, 0.0, 0.0, 0.0, 0.0, 0, 0.49019607843137, 0.4156862745098, 0.23921568627451, 1, AlignH_Center, AlignV_Middle)\n---------------------------\n-- LAYER: bt--\nbt = createLayer()\nsetDefaultAllShapesFill(bt, 0.0, 0.0, 0.0, 0) \nsetDefaultAllShapesStroke(bt, 1.0, 0.35882352941176, 0.43725490196078, 0.46470588235294, 1) \nsetDefaultAllText(bt, 0.0, 0.0, 0.0, 0.0, 0, 0.35882352941176, 0.43725490196078, 0.46470588235294, 1, AlignH_Center, AlignV_Middle)\n\naddButton(bt, bt_hover, bt_click, text_big, rx-40,15, 20.0, 20.0, 0.0, 'X', function() prodFilter = nil selectedProd = {} t2y = 0 end, nil, nil)\n\nif selectedProd.dNWS then\n    addButton(bt, bt_hover, bt_click, text_tiny, 475,515, 18.0, 10, 0.0, 'Pin', function() pinnedProd = deep_copy(selectedProd) registerOutput(serialize({indusSlot = slotName, pinnedProd = pinnedProd})) end, nil, nil)\nend\n\n\n---------------------------\n-- LAYER: bttl_hover--\nbttl_hover = createLayer()\nsetLayerClipRect(bttl_hover, 10,50, 450.0,450.0) \nsetDefaultAllShapesFill(bttl_hover, 0.0, 0.0, 0.0, 0) \nsetDefaultAllShapesStroke(bttl_hover, 1.0, 0.49019607843137, 0.4156862745098, 0.23921568627451, 1) \nsetDefaultAllText(bttl_hover, 0.0, 0.0, 0.0, 0.0, 0, 0.49019607843137, 0.4156862745098, 0.23921568627451, 1, AlignH_Left, AlignV_Middle)\n---------------------------\n-- LAYER: bttl_click--\nbttl_click = createLayer()\nsetLayerClipRect(bttl_click, 10,50, 450.0,450.0)\nsetDefaultAllShapesFill(bttl_click, 0.0, 0.0, 0.0, 0) \nsetDefaultAllShapesStroke(bttl_click, 4.0, 0.49019607843137, 0.4156862745098, 0.23921568627451, 1) \nsetDefaultAllText(bttl_click, 1, 0.49019607843137, 0.4156862745098, 0.23921568627451, 1, 0.49019607843137, 0.4156862745098, 0.23921568627451, 1, AlignH_Left, AlignV_Middle)    \n---------------------------\n-- LAYER: bttl--\nbttl = createLayer()\nsetLayerClipRect(bttl, 10,50, 450.0,450.0)\nsetDefaultAllShapesFill(bttl, 0.0, 0.0, 0.0, 0) \nsetDefaultAllShapesStroke(bttl, 1.0, 0.35882352941176, 0.43725490196078, 0.46470588235294, 1) \nsetDefaultAllText(bttl, 0.0, 0.0, 0.0, 0.0, 0, 0.35882352941176, 0.43725490196078, 0.46470588235294, 1, AlignH_Left, AlignV_Middle)\n\nlocal line = 0\nlocal py = 60\nlocal pf = \"+ \"\nlocal bth = 16\n\nif indusList and type(indusList) == \"table\" then\n    for i, v in ipairs(indusList) do\n        if indusList[v].maximized == true then pf = \"- \" else pf = \"+ \" end\n        local bf = function() indusList[v].maximized = not indusList[v].maximized end\n        addButtonText(bttl, bttl_hover, bttl_click, text_big, 20,py+line*bth+t1y, 300, bth, 0.0, pf..v:upper()..\":\", bf, nil, nil)\n        line = line + 1\n        \n        if indusList[v].maximized == true then\n            for ii, vv in ipairs(indusList[v]) do\n                local filter = findInTable(indusFilter,vv.id)\n                if filter == true then\n                    bf = function() \n                        if vv.name == selectedIndus.name then\n                            selectedIndus = {}\n                            slotName = \"\"\n                            registerOutput(serialize({indusSlot = slotName, pinnedProd = pinnedProd}))\n                        else\n                            selectedIndus = vv\n                            selectedIndus.icon = indusList[v].icon\n                            slotName = vv.slotName\n                            registerOutput(serialize({indusSlot = slotName, pinnedProd = pinnedProd}))\n                        end\n                    end\n                    local bttLayer = bttl\n                    pf = \"- \"\n                    local spf = \"\"\n                    if vv.name == selectedIndus.name then\n                        bttLayer = bttl_hover\n                        pf = \">> \"\n                        spf = \"> \"\n                    end\n                    addButtonText(bttLayer, bttl_hover, bttl_click, text_small, 50,py+line*bth+t1y, 300, bth, 0.0,  pf..vv.name, bf, nil, nil)\n        \n                    if type(iInfos) == \"table\" and iInfos[vv.slotName] then\n                        local output = iInfos[vv.slotName].output\n                        local state = iInfos[vv.slotName].s\n                        local sC = {r=1,g=0,b=0,a=0}\n                        local sT = \"S\"\n                        if state then\n                            if state == 1 and output then\n                                sC = {r=1,g=0,b=0,a=1}\n                            elseif state == 2 then\n                                sC = {r=0,g=1,b=0,a=1}\n                                sT = \"R\"\n                            elseif state == 3 or state == 4 or state == 5 or state == 7 then\n                                sC = {r=1,g=0.5,b=0,a=1}\n                                sT = \"J\"\n                            elseif state == 6 then\n                                sC = {r=0.5,g=0.5,b=0,a=1}\n                                sT = \"P\"\n                            end\n                        end\n                        setNextStrokeColor(bttl, 0, 0,0,0,0)\n                        setNextFillColor(bttl, sC.r,sC.g,sC.b,sC.a)\n                        addCircle(bttl, 450,py+line*bth+t1y+6, 3)\n                        setNextTextAlign(bttLayer, AlignH_Right, AlignV_Middle)\n                        addText(bttLayer,text_small, spf..sT, 440,py+line*bth+t1y+6)\n                        line = line + 1\n                        if output then\n                            line = line - 0.1\n                            addText(bttLayer,text_small, \"> \"..tostring(output), 75,py+line*bth+t1y+6)\n                            line = line + 1\n                        end\n                    end\n                    line = ii==#indusList[v] and line + 1 or line\n                end\n            end\n        else\n            for ii, vv in ipairs(indusList[v]) do\n                if vv.name == selectedIndus.name then\n                    selectedIndus={}\n                    slotName = \"\"\n                    registerOutput(serialize({indusSlot = slotName, pinnedProd = pinnedProd}))\n                    break\n                end\n            end\n            line = line + 1\n        end\n    end\nend\n\nif selectedIndus.id and not findInTable(indusFilter,selectedIndus.id) then selectedIndus={} slotName = \"\" registerOutput(serialize({indusSlot = slotName, pinnedProd = pinnedProd})) end\n\n--------------------------\n-- LAYER: bttr_hover--\nbttr_hover = createLayer()\nsetLayerClipRect(bttr_hover, 470,160, 640.0, 340.0)\nsetDefaultAllShapesFill(bttr_hover, 0.0, 0.0, 0.0, 0)\nsetDefaultAllShapesStroke(bttr_hover, 1.0, 0.49019607843137, 0.4156862745098, 0.23921568627451, 1)\nsetDefaultAllText(bttr_hover, 0.0, 0.0, 0.0, 0.0, 0, 0.49019607843137, 0.4156862745098, 0.23921568627451, 1, AlignH_Left, AlignV_Middle)\n---------------------------\n-- LAYER: bttr_click--\nbttr_click = createLayer()\nsetLayerClipRect(bttr_click, 470,160, 640.0, 340.0)\nsetDefaultAllShapesFill(bttr_click, 0.0, 0.0, 0.0, 0)\nsetDefaultAllShapesStroke(bttr_click, 4.0, 0.49019607843137, 0.4156862745098, 0.23921568627451, 1)\nsetDefaultAllText(bttr_click, 1, 0.49019607843137, 0.4156862745098, 0.23921568627451, 1, 0.49019607843137, 0.4156862745098, 0.23921568627451, 1, AlignH_Left, AlignV_Middle)\n---------------------------\n-- LAYER: bttr--\nbttr = createLayer()\nsetLayerClipRect(bttr, 470,160, 640.0, 340.0)\nsetDefaultAllShapesFill(bttr, 0.0, 0.0, 0.0, 0)\nsetDefaultAllShapesStroke(bttr, 1.0, 0.35882352941176, 0.43725490196078, 0.46470588235294, 1)\nsetDefaultAllText(bttr, 0.0, 0.0, 0.0, 0.0, 0, 0.35882352941176, 0.43725490196078, 0.46470588235294, 1, AlignH_Left, AlignV_Middle)\n\nlocal oX = 25\nlocal py = 170\nlocal px = 480\nlocal line = 0\nlocal icons = {}\nfor i=1, 10 do\n    icons[i] = \"\"\nend\nimg = \"\"\n\n\nfunction drawTittleButton(text,dx,bf,open)\n    local pf = open == true and \"+ \" or \"- \"\n    local dText = pf..text:upper()..\":\"\n    addButtonText(bttr, bttr_hover, bttr_click, text_big, px+oX*dx, py+line*bth+t2y, 300, bth, 0.0, dText, bf, nil, nil)\n    line = line + 1\nend\n\nfunction drawProdButton(text,dx,bf)\n    local bttrLayer = bttr\n    if text == selectedProd.dNWS then\n        bttrLayer = bttr_hover\n    end\n    addButtonText(bttrLayer, bttr_hover, bttr_click, text_small, px+oX*dx, py+line*bth+t2y, 300, bth, 0.0, \"> \"..text, bf, nil, nil)\n    line = line + 1\nend\n\n\n\nfunction drawBranch(branch, depth)\n    local function setMaxFalse(node)\n        if node.childs then\n            for _, child in ipairs(node.childs) do\n                if child.max ~= \"end\" then\n                    child.max = false\n                end\n                setMaxFalse(child)\n            end\n        end\n    end\n\n    local function checkSubBranches(branch, prodFilter)\n        for _, node in ipairs(branch) do\n            if node.max == \"end\" and string.find(node.dNWS:lower(), prodFilter) then\n                return true\n            end\n            if node.childs and checkSubBranches(node.childs, prodFilter) then\n                return true\n            end\n        end\n        return false\n    end\n    \n    local function checkChildsForSelectedProd(node)\n        if node.childs then\n            for _, child in ipairs(node.childs) do\n                if selectedProd.dNWS == child.dNWS then\n                    return true\n                end\n                -- Recursively check sub-branches' children\n                if checkChildsForSelectedProd(child) then\n                    return true\n                end\n            end\n        end\n        return false\n    end\n\n\n    for _, node in ipairs(branch) do\n        local csb = prodFilter and node.childs and checkSubBranches(node.childs, prodFilter) or false\n        if node.max == \"end\" and (prodFilter == nil or (prodFilter ~= nil and type(prodFilter)==\"string\" and string.find(node.dNWS:lower(), prodFilter))) then\n            local bf = function()\n                if node.dNWS == selectedProd.dNWS then\n                    selectedProd = {}\n                    registerOutput(serialize({prodId = 0}))\n                else\n                    registerOutput(serialize({prodId = node.id}))\n                end\n            end\n            drawProdButton(node.dNWS, depth, bf)\n        else\n            if prodFilter == nil or csb then\n                local bf = function()\n                    node.max = not node.max\n                    setMaxFalse(node)\n                    if checkChildsForSelectedProd(node) then selectedProd = {} end\n                end\n                drawTittleButton(node.dNWS, depth, bf, node.max)\n            end\n        end\n\n        if node.childs and ((prodFilter == nil and node.max == true) or csb) then\n            drawBranch(node.childs, depth + 1)\n        end\n    end\n    line = line + 1\nend\n\n\nif type(itemsDetails) == \"table\" then\n    drawBranch(itemsDetails,0)\nend\n\nlocal statusTable = {\n    [1] = \"Stopped\",\n    [2] = \"Running\",\n    [3] = \"Jammed missing ingredient\",\n    [4] = \"Jammed output full\",\n    [5] = \"Jammed no output container\",\n    [6] = \"Pending\",\n    [7] = \"Jammed missing schematics\"\n}\n\n\nimages = createLayer()\nlocal sch = selectedProd.id and \">set product<\" or \"select a product >>>\"\n\nif selectedIndus.name and type(iInfos) == \"table\" and iInfos[selectedIndus.slotName] then\n    setNextFillColor(images,1,1,1,1)\n    iImage = loadImage(selectedIndus.icon)\n    addImage(images, iImage, 15,515, 90.0, 90.0)\n    setNextFillColor(tittles, 0.49019607843137, 0.4156862745098, 0.23921568627451, 1)\n    addText(tittles,text_big, \"> \"..selectedIndus.name, 115,522)\n    setNextFillColor(tittles, 0.49019607843137, 0.4156862745098, 0.23921568627451, 1)\n    local sIOutput = iInfos[selectedIndus.slotName].output or \"No schematic set\"\n    addText(tittles,text_small, \"> \"..sIOutput, 135,534)\n    setNextFillColor(tittles, 0.49019607843137, 0.4156862745098, 0.23921568627451, 1)\n    addText(tittles,text_small, \"> \"..statusTable[iInfos[selectedIndus.slotName].s], 135,546)\n    local sibf = function(com)\n        return function()\n            if selectedIndus.slotName and com then\n                registerOutput(serialize({indusCommand = {indus = selectedIndus.slotName, prod = selectedProd.id, command = com, sQuantity = indusStartN, mQuantity = indusMaintainN}}),2)\n            end\n        end\n    end\n    if sch == \"select a product >>>\" then \n        addButton(bt, bt_hover, bt_click, text_big, 115,555, 170.0, 25.0, 0.0, sch, function()end, nil, nil)\n    else\n        addButton(bt, bt_hover, bt_click, text_big, 115,555, 170.0, 25.0, 0.0, sch, sibf(sch), nil, nil)\n    end\n    if sIOutput ~= \"No schematic set\" then\n        addButton(bt, bt_hover, bt_click, text_big, 290,555, 170.0, 25.0, 0.0, 'start: '..indusStartN, sibf(\"startN\"), nil, nil)\n        addButton(bt, bt_hover, bt_click, text_big, 115,585, 170.0, 25.0, 0.0, 'stop', sibf(\"stop\"), nil, nil)\n        addButton(bt, bt_hover, bt_click, text_big, 290,585, 170.0, 25.0, 0.0, 'maintain: '..indusMaintainN, sibf(\"maintain\"), nil, nil)\n    end\nend\n\nif selectedProd.dNWS then\n    setNextFillColor(images,1,1,1,1)\n    pImage = loadImage(selectedProd.iP)\n    addImage(images, pImage, 475,515, 90.0, 90.0)\n    setNextFillColor(tittles, 0.49019607843137, 0.4156862745098, 0.23921568627451, 1)\n    addText(tittles,text_big, \"> \"..selectedProd.dNWS, 575,522)\n    --setNextFillColor(tittles, 0.35882352941176, 0.43725490196078, 0.46470588235294, 1)\n    local ingredients = {}\n    for i, v in ipairs(selectedProd.ingredients) do\n        ingredients[i] = v.dNWS\n    end\n    ingredients = \"> [\"..table.concat(ingredients,\"] [\")..\"]\"\n    addWrappedText(tittles, text_tiny, ingredients, {[1]=580,[2]=515}, 360.0, 0.0, 0.0, 0.0, 0.0, 0, 0.49019607843137, 0.4156862745098, 0.23921568627451, 1, AlignH_Left, AlignV_Top)\n    addWrappedText(tittles, text_tiny, selectedProd.desc, {[1]=575,[2]=570}, 360.0, 0.0, 0.0, 0.0, 0.0, 0, 0.35882352941176, 0.43725490196078, 0.46470588235294, 1, AlignH_Left, AlignV_Baseline)\nend\n\nif pinnedProd.dNWS then\n    setNextFillColor(images,1,1,1,1)\n    pImage = loadImage(pinnedProd.iP)\n    addImage(images, pImage, 475,55, 90.0, 90.0)\n    setNextFillColor(tittles, 0.49019607843137, 0.4156862745098, 0.23921568627451, 1)\n    addText(tittles,text_big, \"> \"..pinnedProd.dNWS, 575,65)\n    --setNextFillColor(tittles, 0.35882352941176, 0.43725490196078, 0.46470588235294, 1)\n    local ingredients = {}\n    for i, v in ipairs(pinnedProd.ingredients) do\n        ingredients[i] = v.dNWS..\"] x\"..math.floor(v.quantity)\n    end\n    ingredients = \"> [\"..table.concat(ingredients,\" - [\")\n    addWrappedText(tittles, text_tiny, ingredients, {[1]=585,[2]=60}, 390.0, 0.0, 0.0, 0.0, 0.0, 0, 0.49019607843137, 0.4156862745098, 0.23921568627451, 1, AlignH_Left, AlignV_Top)\n    addWrappedText(tittles, text_tiny, pinnedProd.desc, {[1]=575,[2]=112}, 390.0, 0.0, 0.0, 0.0, 0.0, 0, 0.35882352941176, 0.43725490196078, 0.46470588235294, 1, AlignH_Left, AlignV_Baseline)\nend\n\nif not selectedProd.dNWS then indusFilter = nil end\n\n\n--registerOutput(#serialize(itemsDetails))\n\n\n\n---------------------------\n-- LAYER: loading--\nloading = createLayer()\nsetDefaultAllText(loading, 0.0, 0.0, 0.0, 0.0, 0, 1.0, 0.0, 0.0, 1, AlignH_Center, AlignV_Middle)\nif downloader.loadingMsg ~= \"\" then\n    addText(loading, loading_big, downloader.loadingMsg, rx/2,ry/2)\nend\n\n\n-----------------------\n--MASTER LAYER FOOTER--\nOS_front = createLayer() \ntime = getTime()\ncount = count == nil and 1 or count + 1\nif previous_time == nil or time-previous_time >= 1 then\n    screen_fps = count --math.floor(1/getDeltaTime())\n    count = nil\n    previous_time = getTime()\nend\nrc, rcm = getRenderCost(), getRenderCostMax()\nr_c = string.format('render cost: %d / %d (%.1f%%)', rc, rcm, (rc/rcm) * 100)\nsetFontSize(text_small, 11)\nsetNextTextAlign(text_small, 0, 3)\nsetDefaultAllText(OS_front, 0.0, 0.0, 0.0, 0.0, 0, 0.35882352941176, 0.43725490196078, 0.46470588235294, 1, AlignH_Left, AlignV_Baseline)\naddText(OS_front,text_tiny,r_c..\" / screen fps: \"..screen_fps..\"fps / cx: \"..math.floor(cx)..\" / cy: \"..math.floor(cy),575,ry-3)\n\nrequestAnimationFrame(1)\n\nsetHighestPriorityOutput()\n]]\nend","filter":{"args":[],"signature":"onStart()","slotKey":"-5"},"key":"8"},{"code":"------------------------------------------------------------------------\n---------------------------START Serializer-----------------------------\n------------------------------------------------------------------------\nprint(\"functions lib start\",debug)\nlocal concat = table.concat\nlocal function internalSerialize(table, tC, t)\n    t[tC] = \"{\"\n    tC = tC + 1\n    local hasValue = false\n    for key, value in pairs(table) do\n        hasValue = true\n        local keyType = type(key)\n        if keyType == \"string\" then\n            t[tC] = key .. \"=\"\n        elseif keyType == \"number\" then\n            t[tC] = \"[\" .. key .. \"]=\"\n        elseif keyType == \"boolean\" then\n            t[tC] = \"[\" .. tostring(key) .. \"]=\"\n        else\n            t[tC] = \"notsupported=\"\n        end\n        tC = tC + 1\n\n        local check = type(value)\n        if check == \"table\" then\n            tC = internalSerialize(value, tC, t)\n        elseif check == \"string\" then\n            t[tC] = '\"' .. value .. '\"'\n        elseif check == \"number\" then\n            t[tC] = value\n        elseif check == \"boolean\" then\n            t[tC] = tostring(value)\n        else\n            t[tC] = '\"Not Supported\"'\n        end\n        t[tC + 1] = \",\"\n        tC = tC + 2\n    end\n    if hasValue then\n        tC = tC - 1\n    end\n    t[tC] = \"}\"\n    return tC\nend\n\nfunction serialize(value)\n    local t = {}\n    local check = type(value)\n\n    if check == \"table\" then\n        internalSerialize(value, 1, t)\n    elseif check == \"string\" then\n        return '\"' .. value .. '\"'\n    elseif check == \"number\" then\n        return value\n    elseif check == \"boolean\" then\n        return tostring(value)\n    else\n        return '\"Not Supported\"'\n    end\n\n    return concat(t)\nend\n\nfunction deserialize(s)\n    if s == nil then\n        return nil\n    else\n        local func, err = load(\"return \" .. s)\n        if func then\n            local success, result = pcall(func)\n            if success then\n                return result\n            else\n                system.print(\"PB: Error executing function: \" .. tostring(result))\n                return nil\n            end\n        else\n            system.print(\"PB: Error loading string: \" .. tostring(err))\n            return nil\n        end\n    end\nend\n\n\n----------------------------------------------------------------------------\n\nfunction deep_copy(t)\n    if type(t) ~= \"table\" then\n        return t\n    end\n    local t2 = {}\n    for k, v in pairs(t) do\n        t2[k] = deep_copy(v)\n    end\n    return t2\nend\n\nlocal abs, floor, asin, sqrt, cos, acos, sin, deg, atan, rad, sign, clamp, rad2deg, max, ceil = math.abs, math.floor, math.asin, math.sqrt, math.cos, math.acos, math.sin, math.deg, math.atan, math.rad, utils.sign, utils.clamp, constants.rad2deg, math.max, math.ceil\n\ncP = construct.getWorldPosition()\ncPx, cPy, cPz = cP[1], cP[2], cP[3]\ncOU = construct.getWorldOrientationUp()\ncOUx, cOUy, cOUz = cOU[1], cOU[2], cOU[3]\ncOF = construct.getWorldOrientationForward()\ncOFx, cOFy, cOFz = cOF[1], cOF[2], cOF[3]\ncOR = construct.getWorldOrientationRight()\ncORx, cORy, cORz = cOR[1], cOR[2], cOR[3]\nmPP = player.getPosition()\nmPPx, mPPy, mPPz = mPP[1], mPP[2], mPP[3]\n\nfunction vectorLen(x,y,z)\n    return sqrt(x*x+y*y+z*z)\nend\n\nfunction norm(x,y,z)\n    local l = sqrt(x*x + y*y + z*z)\n    return x/l, y/l, z/l\nend\n\nfunction dotVec(x1,y1,z1,x2,y2,z2)\n    return x1*x2 + y1*y2 + z1*z2\nend\n\nfunction multiplyVec(x,y,z,factor)\n    return x*factor, y*factor, z*factor\nend\n\nfunction world2local(x,y,z)\n    local v = library.systemResolution3({cWORx, cWORy, cWORz},{cWOFx, cWOFy, cWOFz},{cWOUPx, cWOUPy, cWOUPz},{x,y,z})\n    return v[1],v[2],v[3]\nend\n\nfunction rotateVec(vx, vy, vz, phi, ax, ay, az)\n    local l = sqrt(ax*ax + ay*ay + az*az)\n    local ux, uy, uz = ax/l, ay/l, az/l\n    local cs, s = cos(phi), sin(phi)\n    local m1x, m1y, m1z = (cs + ux * ux * (1-cs)), (ux * uy * (1-cs) - uz * s), (ux * uz * (1-cs) + uy * s)\n    local m2x, m2y, m2z = (uy * ux * (1-cs) + uz * s), (cs + uy * uy * (1-cs)), (uy * uz * (1-cs) - ux * s)\n    local m3x, m3y, m3z = (uz * ux * (1-cs) - uy * s), (uz * uy * (1-cs) + ux * s), (cs + uz * uz * (1-cs))\n    return m1x*vx+m1y*vy+m1z*vz, m2x*vx+m2y*vy+m2z*vz, m3x*vx+m3y*vy+m3z*vz\nend\n\nfunction cross(x, y, z, vx, vy, vz)\n    return y*vz - z*vy, z*vx - x*vz, x*vy - y*vx\nend\n\nfunction getAAR(ox, oy, oz, nx, ny, nz, px, py, pz)\n    ox, oy, oz = norm(ox, oy, oz)\n    nx, ny, nz = norm(nx, ny, nz)\n    local ax, ay, az = cross(ox, oy, oz, nx, ny, nz)\n    local axisLen = vectorLen(ax, ay, az)\n    local angle = 0\n    ax, ay, az = norm(ax, ay, az)\n    if axisLen > 0.000001\n        then\n        angle = asin(clamp(axisLen, 0, 1))\n    else\n        ax, ay, az = px, py, pz\n    end\n    if dotVec(ox, oy, oz, nx, ny, nz) < 0\n        then\n        angle = math.pi - angle\n    end\n    return ax, ay, az, angle\nend\n\nfunction getConstructRot(x, y, z)\n    if x == nil then x, y, z = -1,0,0 end\n    x, y, z = norm(x,y,z)\n    local CRx, CRy, CRz = cORx, cORy, cORz\n    local CUx, CUy, CUz = cOUPx, cOUPy, cOUPz\n    local cx, cy, cz = cross(x, y, z, CUx, CUy, CUz)\n    local rAx, rAy, rAz = norm(cx, cy, cz)\n    local ConstructRot = acos(clamp(dotVec(rAx, rAy, rAz,CRx, CRy, CRz), -1, 1)) * rad2deg\n    cx, cy, cz = cross(rAx, rAy, rAz, CRx, CRy, CRz)\n    if dotVec(cx, cy, cz, CUx, CUy, CUz) < 0 then ConstructRot = -ConstructRot end\n    return ConstructRot\nend\n\nfunction minifyString(str)\n    local replacements = {\n        [\"Intermediary\"] = \"Intrm\",\n        [\"Functional\"] = \"Fnct\",\n        [\"Complex\"] = \"Cmplx\",\n        [\"Structural\"] = \"Strc\",\n        [\"Exceptional\"] = \"Excp\",\n        [\"Components\"] = \"Cmpts\",\n        [\"Component\"] = \"Cmpns\",\n        [\"Connectors\"] = \"Cnnct\",\n        [\"Fixations\"] = \"Fxtn\",\n        [\"Screws\"] = \"Scrw\",\n        [\"Electric\"] = \"Elct\",\n        [\"Combustion\"] = \"Cmbs\",\n        [\"Power\"] = \"Pwr\",\n        [\"Basic\"] = \"Bsc\",\n        [\"Uncommon\"] = \"Unc\",\n        [\"Advanced\"] = \"Adv\",\n        [\"Rare\"] = \"Rar\",\n        [\"Exotic\"] = \"Extc\",\n        [\"Antenna\"] = \"Ant\",\n        [\"Mobile\"] = \"Mbl\",\n        [\"Panel\"] = \"Pnl\",\n        [\"Screen\"] = \"Scrn\",\n        [\"Magnetic\"] = \"Mgntc\",\n        [\"Alignment\"] = \"Algm\",\n        [\"Antimatter\"] = \"Antmt\",\n        [\"Anti-Gravity\"] = \"Agg\",\n        [\"Robotic\"] = \"Rbtc\",\n        [\"Standard\"] = \"Stnd\",\n        [\"Frame\"] = \"Frm\",\n        [\"Optics\"] = \"Optc\",\n        [\"Quantum\"] = \"Qntm\",\n        [\"Missile\"] = \"Mssl\",\n        [\"Processor\"] = \"Prcss\",\n        [\"Burners\"] = \"Brnr\",\n        [\"Explosive\"] = \"Expls\",\n        [\"System\"] = \"Sstm\",\n        [\"Chamber\"] = \"Chmb\",\n        [\"Firing\"] = \"Frng\",\n        [\"Cylinder\"] = \"Clnd\",\n        [\"Control\"] = \"Ctrl\",\n        [\"Chemical\"] = \"Chmc\",\n        [\"Container\"] = \"Cntn\",\n        [\"Reinforced\"] = \"Rnfr\",\n        [\"hydraulics\"] = \"hdrl\",\n        [\"Injector\"] = \"Injc\",\n        [\"Fixation\"] = \"Fxtn\",\n        [\"Transformer\"] = \"Trnsf\",\n        [\"Industry\"] = \"Ind\",\n    }\n\n    for word, short in pairs(replacements) do\n        str = string.gsub(str, word, short)\n    end\n\n    return str\nend\n\n\nfunction recoverString(str)\n    local replacements = {\n        [\"Intrm\"] = \"Intermediary\",\n        [\"Fnct\"] = \"Functional\",\n        [\"Cmplx\"] = \"Complex\",\n        [\"Strc\"] = \"Structural\",\n        [\"Excp\"] = \"Exceptional\",\n        [\"Cmpts\"] = \"Components\",\n        [\"Cmpns\"] = \"Component\",\n        [\"Cnnct\"] = \"Connectors\",\n        [\"Fxtn\"] = \"Fixations\",\n        [\"Scrw\"] = \"Screws\",\n        [\"Elct\"] = \"Electric\",\n        [\"Cmbs\"] = \"Combustion\",\n        [\"Pwr\"] = \"Power\",\n        [\"Bsc\"] = \"Basic\",\n        [\"Unc\"] = \"Uncommon\",\n        [\"Adv\"] = \"Advanced\",\n        [\"Rar\"] = \"Rare\",\n        [\"Extc\"] = \"Exotic\",\n        [\"Ant\"] = \"Antenna\",\n        [\"Mbl\"] = \"Mobile\",\n        [\"Pnl\"] = \"Panel\",\n        [\"Scrn\"] = \"Screen\",\n        [\"Mgntc\"] = \"Magnetic\",\n        [\"Algm\"] = \"Alignment\",\n        [\"Antmt\"] = \"Antimatter\",\n        [\"Agg\"] = \"Anti-Gravity\",\n        [\"Rbtc\"] = \"Robotic\",\n        [\"Stnd\"] = \"Standard\",\n        [\"Frm\"] = \"Frame\",\n        [\"Optc\"] = \"Optics\",\n        [\"Qntm\"] = \"Quantum\",\n        [\"Mssl\"] = \"Missile\",\n        [\"Prcss\"] = \"Processor\",\n        [\"Brnr\"] = \"Burners\",\n        [\"Expls\"] = \"Explosive\",\n        [\"Sstm\"] = \"System\",\n        [\"Chmb\"] = \"Chamber\",\n        [\"Frng\"] = \"Firing\",\n        [\"Clnd\"] = \"Cylinder\",\n        [\"Ctrl\"] = \"Control\",\n        [\"Chmc\"] = \"Chemical\",\n        [\"Cntn\"] = \"Container\",\n        [\"Rnfr\"] = \"Reinforced\",\n        [\"hdrl\"] = \"hydraulics\",\n        [\"Injc\"] = \"Injector\",\n        [\"Fxtn\"] = \"Fixation\",\n        [\"Trnsf\"] = \"Transformer\",\n        [\"Ind\"] = \"Industry\",\n    }\n\n    for short, word in pairs(replacements) do\n        str = string.gsub(str, short, word)\n    end\n\n    return str\nend\n\nprint = function(s,debug)\n    if debug == true then\n        system.print(\"Debug: \"..s)\n        return\n    elseif debug == nil or debug == fale then\n        if type(s) == \"table\" then\n            system.print(type(s)..\": \"..serialize(s))\n            return\n        elseif type(s) == \"function\" then\n            system.print(type(s))\n            return\n        else\n            system.print(type(s)..\": \"..tostring(s))\n            return\n        end\n    end\nend\n\nfunction maxDepth(t)\n    local function depth(t, level)\n        local maxLevel = level\n        for _, v in pairs(t) do\n            if type(v) == \"table\" then\n                local d = depth(v, level + 1)\n                if d > maxLevel then\n                    maxLevel = d\n                end\n            end\n        end\n        return maxLevel\n    end\n    return depth(t, 1)\nend\n\nfunction getIdBydNWS(tbl, dNWSValue)\n    for key, value in pairs(tbl) do\n        if type(value) == \"table\" then\n            local result = getIdBydNWS(value, dNWSValue)\n            if result then\n                return result\n            end\n        elseif key == \"dNWS\" and value == dNWSValue then\n            return tbl.id\n        end\n    end\n    return nil  -- Return nil if dNWSValue is not found\nend\n\nfunction convertSeconds(seconds)\n    local hours = math.floor(seconds / 3600)\n    local minutes = math.floor((seconds % 3600) / 60)\n    local secs = seconds % 60\n    return string.format(\"%d h, %d min, %d sec\", hours, minutes, secs)\nend\n\nfunction findInTable(t, vf)\n    --if not t or type(t) ~= \"table\" then return false end\n    for k, v in pairs(t) do\n        if k == \"id\" and v == vf then\n            return true\n        elseif type(v) == \"table\" and findInTable(v, vf) then\n            return true\n        end\n    end\n    return false\nend\n\nfunction countWords(inputStr)\n    local count = 0\n    for word in inputStr:gmatch(\"%S+\") do\n        count = count + 1\n    end\n    return count\nend\n\n\n\nfunction removeFirstAndLastWord(inputStr)\n    -- Remove leading and trailing whitespace\n    inputStr = inputStr:match(\"^%s*(.-)%s*$\")\n\n    -- Find the first space\n    local firstSpace = inputStr:find(\" \")\n    if not firstSpace then\n        return \"\"\n    end\n\n    local withoutFirstAndLast = inputStr:sub(firstSpace + 1)\n\n    if countWords(inputStr) > 2 and getSize(inputStr) ~= 0 then\n        local lastSpace = withoutFirstAndLast:match(\".*%s()\")\n        if not lastSpace then\n            return \"\"\n        end\n        -- Remove the last word\n        withoutFirstAndLast = withoutFirstAndLast:sub(1, lastSpace - 1)\n    end\n    return withoutFirstAndLast\nend\n\nfunction deepCopy(original)\n    local copy = {}\n    for key, value in pairs(original) do\n        if type(value) == 'table' then\n            copy[key] = deepCopy(value)\n        else\n            copy[key] = value\n        end\n    end\n    return copy\nend\n\nfunction sortBranches(branch)\n    local copiedBranch = deepCopy(branch)\n\n    local function sortChilds(childs)\n        table.sort(childs, function(a, b)\n                if a.tier == b.tier then\n                    return a.size < b.size\n                else\n                    return a.tier < b.tier\n                end\n            end)\n    end\n\n    local function allChildsHaveMaxEnd(childs)\n        for _, child in ipairs(childs) do\n            if child.max ~= \"end\" then\n                return false\n            end\n        end\n        return true\n    end\n\n    local function recursiveSort(branch)\n        table.sort(branch, function(a, b) return a.dNWS < b.dNWS end)\n\n        for _, node in ipairs(branch) do\n            if node.childs and #node.childs > 0 then\n                recursiveSort(node.childs)\n                if allChildsHaveMaxEnd(node.childs) and node.childs[1].size ~= 0 then\n                    sortChilds(node.childs)\n                else\n                    table.sort(node.childs, function(a, b) return a.dNWS < b.dNWS end)\n                end\n            end\n        end\n    end\n\n    recursiveSort(copiedBranch)\n    return copiedBranch\nend\n\nfunction getSize(str) \n    local lastWord = str:match(\"(%w+)%s*$\")\n    local size = 0\n    if lastWord == \"xs\" then\n        size = 1\n    elseif lastWord == \"s\" then\n        size = 2\n    elseif lastWord == \"m\" then\n        size = 3\n    elseif lastWord == \"l\" then\n        size = 4\n    elseif lastWord == \"xl\" then\n        size = 5\n    elseif lastWord == \"xxl\" then\n        size = 6\n    elseif lastWord == \"xxxl\" then\n        size = 7\n    elseif lastWord == \"xxxxl\" then\n        size = 8\n    end\n    return size \nend\n\nfunction isTableEmpty(tbl)\n    for _ in pairs(tbl) do\n        return false\n    end\n    return true\nend\n\n\nfunction cleanEntry(entry, isRoot)\n    local cleaned = {\n        dNWS = entry.displayNameWithSize:gsub('\"', '*'),\n        childs = {},\n    }\n\n    local hasChildren = false\n    for _, childId in ipairs(entry.childIds) do\n        local childEntry = system.getItem(childId)\n        local cleanedChild = cleanEntry(childEntry, false)\n        table.insert(cleaned.childs, cleanedChild)\n        hasChildren = true\n    end\n    if #cleaned.childs == 0 then cleaned.childs = nil end\n\n    if hasChildren then\n        cleaned.max = false\n        cleaned.id = nil\n        cleaned.tier = nil\n    else\n        local recipes =  system.getRecipes(entry.id)\n        if recipes[1] then --not isTableEmpty(entry.products) then\n            cleaned.tier = entry.tier ~= nil and entry.tier or 1\n            cleaned.size = getSize(entry.displayNameWithSize) or 1\n            cleaned.id = entry.id\n            cleaned.max = \"end\"\n        else\n            cleaned = nil\n        end\n    end\n    if isRoot then\n        cleaned.max = false\n    end\n    if cleaned and cleaned.dNWS == \"Other\" then \n        cleaned = nil \n    end\n    return cleaned\nend\n\nprint(\"functions lib end\",debug)","filter":{"args":[],"signature":"onStart()","slotKey":"-5"},"key":"9"},{"code":"print(\"uploader start\",debug)\n\n-- Global variables to maintain state\ncurrentChunkIndex = 1\ntotalChunks = 0\nmessageContent = \"\"\npreviousMsg = \"\"\n\n-- PB\nPB = {}\nPB.started = false\nPB.chunks = {}\n\nfunction splitIntoChunks(str, chunkSize)\n    local chunks = {}\n    for i = 1, #str, chunkSize do\n        table.insert(chunks, str:sub(i, i + chunkSize - 1))\n    end\n    return chunks\nend\n\n\nfunction PB:sendLongMessage(message)\n    local maxLength = 1024\n\n    -- Initialize global variables\n    currentChunkIndex = 1\n    messageContent = message\n    self.chunks = splitIntoChunks(message,maxLength)\n    totalChunks = #self.chunks\n    previousMsg = \"\"\n\n    -- Send \"start\" message\n    if currentChunkIndex == 1 then\n        unit.stopTimer(\"tick\")\n        system.print(\"Programing board: started uploading, \"..totalChunks..\" chunks\")\n        screen.setScriptInput(\"START \"..totalChunks)\n        previousMsg = \"START \"..totalChunks\n\n    else\n        --PB:processMessage()\n    end\nend\n\nfunction PB:processMessage()\n    system.print(\"Programing board: processing\")\n    -- Receive acknowledgment\n    if PB:receiveAck() then\n        if currentChunkIndex <= totalChunks then\n            self.started = true\n            print(\"Screen: succesfully sent chunk: \"..previousMsg,debug)\n            local percentage = math.floor((currentChunkIndex / totalChunks) * 100)\n            system.print(\"Programing board: uploading chunk \"..currentChunkIndex..\"/\"..totalChunks..\" / \"..percentage..\"%\")\n            local chunkMessage = self.chunks[currentChunkIndex]\n            previousMsg = chunkMessage\n            screen.setScriptInput(chunkMessage)\n        else\n            print(\"Screen: succesfully sent chunk: \"..previousMsg,debug)\n            screen.setScriptInput(\"END\")\n            currentChunkIndex = 0\n            totalChunks = 0\n            messageContent = \"\"\n            previousMsg = \"\"\n            previousInput = \"END\"\n            self.started = false\n            system.print(\"Programing board: upload succesfull\")\n            unit.stopTimer(\"upload\")\n            unit.setTimer(\"tick\",0.1)\n        end\n        currentChunkIndex = currentChunkIndex + 1\n    else\n        if self.started == false then\n            unit.stopTimer(\"tick\")\n            system.print(\"Programing board: failed, retrying uploading, \"..totalChunks..\" chunks\")\n            screen.setScriptInput(\"START \"..totalChunks)\n        end\n    end\nend\n\nfunction PB:receiveAck()\n    local ack = screen.getScriptOutput()\n    local valid = ack == previousMsg and true or false\n    return valid\nend\n\nprint(\"uploader end\",debug)\n","filter":{"args":[],"signature":"onStart()","slotKey":"-5"},"key":"10"},{"code":"containersItems = {\n    [1] = {type = \"Raw Ores\"}, \n    [2] = {type = \"Pures\"},\n    [3] = {type = \"Products\"},\n    [4] = {type = \"Parts\"},\n}\nfunction uppdateContainersItems(ind)\n\n    --containers[ind].updateContent()\n    local content = containers[ind].getContent()\n        \n    local function addOrUpdate(container, newItem)\n        for _, item in ipairs(container) do\n            if item.n == newItem.n then\n                container = newItem\n                return\n            end\n        end\n        table.insert(container, newItem)\n    end\n    \n    for i, v in ipairs(content) do\n        local dNWS = system.getItem(v.id).displayNameWithSize\n        local desc = system.getItem(v.id).description\n    \n        if string.find(desc, \"Ore is\") then\n            addOrUpdate(containersItems[1], {n = dNWS, q = v.quantity})\n    \n        elseif string.find(desc, \"Pure materials\") or string.find(desc, \"Relic Plasma can\") then\n            addOrUpdate(containersItems[2], {n = dNWS, q = v.quantity})\n            \n        elseif string.find(desc, \"A product\") then\n            addOrUpdate(containersItems[3], {n = dNWS, q = v.quantity})\n    \n        elseif string.find(desc:lower(), \"parts are\") or string.find(desc:lower(), \"part are\") then\n            local size = getSize(dNWS)\n            local tier = system.getItem(v.id).tier\n            addOrUpdate(containersItems[4], {n = dNWS, sn = removeFirstAndLastWord(dNWS), q = v.quantity, s = size, t = tier})\n        end\n    end\n    \n    for i, v in ipairs(containersItems) do\n        if i <= 3 then\n            table.sort(containersItems[i], function(a,b) return a.n < b.n end)\n        else\n            table.sort(containersItems[i], function(a, b)\n                if a.sn < b.sn then\n                    return true\n                elseif a.sn > b.sn then\n                    return false\n                else\n                    if a.t < b.t then\n                        return true\n                    elseif a.t > b.t then\n                        return false\n                    else\n                        return a.s < b.s\n                    end\n                end\n            end)\n        end\n    end\n    for i, v in ipairs(containersItems) do\n        for ii, vv in ipairs(v) do\n            --containersItems[i][ii].s=nil\n            --containersItems[i][ii].t=nil\n            --containersItems[i][ii].sn=nil\n        end\n    end\n    if ind == #containers then containersLoading = false end\n    init2()\nend\n\n\ninit2 = function()\n    if screenHub then\n    local SC2 = [[\n\n---------------------------------------------------------------\n--BEGINING OF CUSTOM LIBRARIES CODE\n---------------------------------------------------------------\nfunction addWrappedText(a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p)local rx,ry=getResolution()local q,r=d[1]or 0,d[2]or 0;function wrapText()maxWidth=e or rx*0.9;local s,u,v={},{},0;for w in c:gmatch(\"([^\\n]*)\\n?\")do s[#s+1]={}for x in w:gmatch(\"%S+\")do u=s[#s]local y=#u==0 and x or' '..x;local z,A=getTextBounds(b,y)if v+z<maxWidth then u[#u+1]=y;v=v+z else s[#s]=table.concat(u)s[#s+1]={x}v=getTextBounds(b,x)u=nil end end;s[#s]=table.concat(s[#s])v=0 end;return s end;local B=getFontSize(b)local C=B+2;local D=wrapText()local E=r+C;for F,u in ipairs(D)do setNextStrokeWidth(a,f)setNextStrokeColor(a,g,h,i,j)setNextFillColor(a,k,l,m,n)setNextTextAlign(a,o,p)addText(a,b,u,q,E)E=E+C end end;\n\nfunction setNextAllShapesStroke(a,f,H,I,J,K)setNextStrokeColor(a,H,I,J,K)setNextStrokeWidth(a,f)end;\n\nfunction setNextAllShapesFill(a,H,I,J,K)setNextFillColor(a,H,I,J,K)end;\n\nfunction setNextAllText(a,f,g,h,i,j,k,l,m,n,o,p)setNextStrokeWidth(a,f)setNextStrokeColor(a,g,h,i,j)setNextFillColor(a,k,l,m,n)setNextTextAlign(a,o,p)end;\n\nfunction setDefaultAllShapesStroke(a,f,H,I,J,K)setDefaultStrokeColor(a,Shape_Line,H,I,J,K)setDefaultStrokeWidth(a,Shape_Line,f)setDefaultStrokeColor(a,Shape_Bezier,H,I,J,K)setDefaultStrokeWidth(a,Shape_Bezier,f)setDefaultStrokeColor(a,Shape_Circle,H,I,J,K)setDefaultStrokeWidth(a,Shape_Circle,f)setDefaultStrokeColor(a,Shape_BoxRounded,H,I,J,K)setDefaultStrokeWidth(a,Shape_BoxRounded,f)setDefaultStrokeColor(a,Shape_Polygon,H,I,J,K)setDefaultStrokeWidth(a,Shape_Polygon,f)end;\n\nfunction setDefaultAllShapesFill(a,H,I,J,K)setDefaultFillColor(a,Shape_Line,H,I,J,K)setDefaultFillColor(a,Shape_Bezier,H,I,J,K)setDefaultFillColor(a,Shape_Circle,H,I,J,K)setDefaultFillColor(a,Shape_BoxRounded,H,I,J,K)setDefaultFillColor(a,Shape_Polygon,H,I,J,K)end;\n\nfunction setDefaultAllText(a,f,g,h,i,j,k,l,m,n,o,p)setDefaultStrokeWidth(a,Shape_Text,f)setDefaultStrokeColor(a,Shape_Text,g,h,i,j)setDefaultFillColor(a,Shape_Text,k,l,m,n)setDefaultTextAlign(a,o,p)end;\n\nfunction addGif(a,aJ,aK,aL,e,a9,aM,D,aN,aO)local aP=tostring(\"id\"..tostring(a)..tostring(aJ)..aK..aL..e..a9)if giffInit==nil then giffInit={id={currentFrame=0}}end;if not giffInit[aP]then giffInit[aP]={currentFrame=0}end;local aQ=giffInit[aP]local aR=2;local aS=aM*D-aR;c_line=c_line or 0;c_column=c_column or 0;local aT,aU=getImageSize(aJ)local aV,aW=aT/aM,aU/D;local function aX()if aO=='horizontal'then c_line=math.floor(aQ.currentFrame)<aS and math.floor(aQ.currentFrame)/aM or D-1;c_column=math.floor(aQ.currentFrame)<aS and(c_line-math.floor(c_line))*aM or aM-aR-1 else c_column=aQ.currentFrame/D;c_line=c_column-math.floor(c_column)*D-1 end;c_line=math.floor(c_line)c_column=c_column end;aX()addImageSub(a,aJ,aK,aL,e,a9,aV*c_column,aW*c_line,aV,aW)if aQ.currentFrame<aS then aQ.currentFrame=aQ.currentFrame+aN*getDeltaTime()*20 else aQ.currentFrame=0 end end;\n\nfunction isCursorIn(Y,Z,_,a0,maxY)local cx,cy=getCursor() if cx>0 and cy>0 then if maxY and cy>maxY then return false elseif cx>=Y and cx<=_ and cy>=Z and cy<=a0 then return true else return false end else return false end end;\n\nfunction deserialize(s)\n    if s == nil then\n        return nil\n    else\n        local func, err = load(\"return \" .. s)\n        if func then\n            local success, result = pcall(func)\n            if success then\n                return result\n            else\n                --registerOutput(\"Error executing function: \" .. tostring(result),0)\n                return nil\n            end\n        else\n            --registerOutput(\"Error loading string: \" .. tostring(err),0)\n            return nil\n        end\n    end\nend\n\nfunction findInTable(t, vf)\n    if not t or #t == 0 then return true end\n    for _, v in ipairs(t) do\n        if v == vf then\n            return true\n        end\n    end\n    return false\nend\n\nfunction deep_copy(t)\n    if type(t) ~= \"table\" then\n        return t\n    end\n    local t2 = {}\n    for k, v in pairs(t) do\n        t2[k] = deep_copy(v)\n    end\n    return t2\nend\n\nfunction calculateBoxXPositions(rx)\n    local spacing = 10\n    local numberOfBoxes = 4\n\n    local totalSpacing = spacing * (numberOfBoxes + 1)\n    local availableWidth = rx - totalSpacing\n\n    local sizeX = availableWidth / numberOfBoxes\n\n    local positions = {}\n    for i = 0, numberOfBoxes - 1 do\n        local x = spacing + (sizeX + spacing) * i\n        table.insert(positions, x)\n    end\n\n    return positions, sizeX\nend\n\nShape_Bezier = 0\nShape_Box = 1\nShape_BoxRounded = 2\nShape_Circle = 3\nShape_Image = 4\nShape_Line = 5\nShape_Polygon = 6\nShape_Text = 7\nShape_PolyLine = 5\nShape_PolyLineFill = 6\n\n\ncontainersItems = ]]..serialize(containersItems)..[[\n\nselectedProd = ]]..serialize(selectedIndusIngredients)..[[\n\npinnedProd = ]]..serialize(pinnedProd)..[[\n\nloading = ]]..serialize(containersLoading)..[[\n\n-- END OF PROXY CODE AND LIBRARIES --\n-------------------------------------\n-- BEGINING OF YOUR CODE           --\n\n-- MASTER LAYER --\n-- GROUP: LOADFONT\ntittle_big = loadFont('Montserrat', 22.0)\ntittle_small = loadFont('Montserrat', 18.0)\ntext_big = loadFont('Montserrat', 16.0)\ntext_small = loadFont('Montserrat', 12)\ntext_smaller = loadFont('Montserrat', 10)\ntext_tiny = loadFont('Montserrat', 8)\n\n-- GROUP: LOADIMAGE \nlogo = loadImage('assets.prod.novaquark.com/91318/c108c8f6-c2a2-41d3-b1ab-03fc9b86c8b4.png')\n\n-- GROUP: BACKGROUND \nsetBackgroundColor(0.050980392156863,0.094117647058824,0.10980392156863,1,0.5)\n\n-- GROUP: HEADER1 \nif not init then\n    init = true\n    rx, ry = getResolution()\n    ty = {0,0,0,0}\n\n    srollSpeed = 50\n    format, sub = string.format, string.sub\n    \n    updateTime = getTime() + 30.1\nend\n\ncx, cy = getCursor()\n\nlocal input = getInput()\nif input then\n    dInput = deserialize(input)\n    if type(dInput) == \"table\" then\n        if dInput.mw and cx > 0 and cy > 0 then\n            if cx > 0 and cx < (rx/4) then \n                ty[1] = ty[1]+dInput.mw*srollSpeed <= 0 and ty[1]+dInput.mw*srollSpeed or ty[1]\n            elseif cx > (rx/4) and cx < (rx/4)*2 then\n                ty[2] = ty[2]+dInput.mw*srollSpeed <= 0 and ty[2]+dInput.mw*srollSpeed or ty[2]\n            elseif cx > (rx/4)*2 and cx < (rx/4)*3 then \n                ty[3] = ty[3]+dInput.mw*srollSpeed <= 0 and ty[3]+dInput.mw*srollSpeed or ty[3]\n            elseif cx > (rx/4)*3 and cx < rx then \n                ty[4] = ty[4]+dInput.mw*srollSpeed <= 0 and ty[4]+dInput.mw*srollSpeed or ty[4]\n            end\n        end\n    end\nend\n\n\n---------------------------\n-- LAYER: animated_logo--\nanimated_logo = createLayer()\naddGif(animated_logo, logo, 921,505, 100.0, 100.0, '10.0', '18', '1', 'horizontal')\n\n\n---------------------------\n-- LAYER: background--\nbackground = createLayer()\nsetDefaultAllShapesStroke(background, 0.0, 0.0, 0.0, 0.0, 0) \nsetDefaultAllShapesFill(background, 0.025490196078431, 0.047058823529412, 0.054901960784314, 1)\n\nlocal bposX, bsizeX = calculateBoxXPositions(rx)\nfor i, v in ipairs(bposX) do\n    addBoxRounded(background, v,10, bsizeX, 30.0, 0.0)  --left tittle box\n    setNextAllShapesFill(background, 0.066666666666667, 0.11176470588235, 0.14117647058824, 1) \n    addBoxRounded(background, v,50, bsizeX, 450.0, 0.0) --left background box\nend\naddBoxRounded(background, 10,510, 100.0, 100.0, 0.0) --left pic box\n--addBoxRounded(background, 470,510, 100.0, 100.0, 0.0) --right bottom pic box\n\n\n---------------------------\n-- LAYER: tittles--\ntittles = createLayer()\nsetDefaultAllText(tittles, 0.0, 0.0, 0.0, 0.0, 0, 1.0, 1.0, 1.0, 1, AlignH_Left, AlignV_Baseline)\n\nfor i, v in ipairs(bposX) do\n    addText(tittles, tittle_big, containersItems[i].type..\": \"..#containersItems[i], v+10,35)\nend\n\n\n---------------------------\n-- LAYER: text--\ntextbox1 = createLayer()\nsetLayerClipRect(textbox1, bposX[1],50, bsizeX,450.0)\nsetDefaultAllShapesFill(textbox1, 0.0, 0.0, 0.0, 0) \nsetDefaultAllShapesStroke(textbox1, 1.0, 0.49019607843137, 0.4156862745098, 0.23921568627451, 1) \nsetDefaultAllText(textbox1, 0.0, 0.0, 0.0, 0.0, 0, 0.35882352941176, 0.43725490196078, 0.46470588235294, 1, AlignH_Left, AlignV_Middle)\n\ntextbox2 = createLayer()\nsetLayerClipRect(textbox2, bposX[2],50, bsizeX,450.0)\nsetDefaultAllShapesFill(textbox2, 0.0, 0.0, 0.0, 0) \nsetDefaultAllShapesStroke(textbox2, 1.0, 0.49019607843137, 0.4156862745098, 0.23921568627451, 1) \nsetDefaultAllText(textbox2, 0.0, 0.0, 0.0, 0.0, 0, 0.35882352941176, 0.43725490196078, 0.46470588235294, 1, AlignH_Left, AlignV_Middle)\n\ntextbox3 = createLayer()\nsetLayerClipRect(textbox3, bposX[3],50, bsizeX,450.0)\nsetDefaultAllShapesFill(textbox3, 0.0, 0.0, 0.0, 0) \nsetDefaultAllShapesStroke(textbox3, 1.0, 0.49019607843137, 0.4156862745098, 0.23921568627451, 1) \nsetDefaultAllText(textbox3, 0.0, 0.0, 0.0, 0.0, 0, 0.35882352941176, 0.43725490196078, 0.46470588235294, 1, AlignH_Left, AlignV_Middle)\n\ntextbox4 = createLayer()\nsetLayerClipRect(textbox4, bposX[4],50, bsizeX,450.0)\nsetDefaultAllShapesFill(textbox4, 0.0, 0.0, 0.0, 0) \nsetDefaultAllShapesStroke(textbox4, 1.0, 0.49019607843137, 0.4156862745098, 0.23921568627451, 1) \nsetDefaultAllText(textbox4, 0.0, 0.0, 0.0, 0.0, 0, 0.35882352941176, 0.43725490196078, 0.46470588235294, 1, AlignH_Left, AlignV_Middle)\n\ntextbox = {textbox1,textbox2,textbox3,textbox4}\n\nfunction formatVolumeOrUnit(i, number)\n    local numt = \"\"\n    if i <= 3 then\n        if number > 1000 then\n            numt = format(\"%.1f kl\", number / 1000)\n            if sub(numt,-5) == \".0 kl\" then numt = sub(numt,1,-6)..\" kl\" end\n        else\n            numt = format(\"%.0f l\", number)\n        end\n    else\n        numt = format(\"x%.0f\", number)\n    end\n    return numt\nend\n\nfunction formatVolume(number)\n    local numt = \"\"\n    if number > 1000 then\n        numt = format(\"%.1f k\", number / 1000)\n        if sub(numt,-4) == \".0 k\" then numt = sub(numt,1,-5)..\" k\" end\n    else\n        numt = format(\"%.0f\", number)\n    end\n    return numt\nend\n\nfunction simplifyString(inputStr)\n    -- Remove \"Pure \" from the start\n    if inputStr:sub(1, 5):lower() == \"pure \" then\n        inputStr = inputStr:sub(6)\n    end\n    \n    -- Remove \"product\" from the end\n    if inputStr:sub(-7):lower() == \"product\" then\n        inputStr = inputStr:sub(1, -8)\n    end\n    \n    return inputStr\nend\n\nfunction recoverSize(size)\n    local sizeString = \"\"\n    if size == 1 then\n        sizeString = \" xs\"\n    elseif size == 2 then\n        sizeString = \" s\"\n    elseif size == 3 then\n        sizeString = \" m\"\n    elseif size == 4 then\n        sizeString = \" l\"\n    elseif size == 5 then\n        sizeString = \" xl\"\n    elseif size == 6 then\n        sizeString = \" xxl\"\n    elseif size == 7 then\n        sizeString = \" xxxl\"\n    elseif size == 8 then\n        sizeString = \" xxxxl\"\n    end\n    return sizeString\nend\n\nfunction recoverTier(size)\n    local tierString = \"\"\n    if size == 1 then\n        tierString = \" Bas. \"\n    elseif size == 2 then\n        tierString = \" Unc. \"\n    elseif size == 3 then\n        tierString = \" Adv. \"\n    elseif size == 4 then\n        tierString = \" Rar. \"\n    elseif size == 5 then\n        tierString = \" Exo. \"\n    end\n    return tierString\nend\n\nlocal line = 0\nlocal py = 60\nlocal oy = 16\nlocal psn = \"\"\n\nfor i, v in ipairs(containersItems) do\n    psn = \"\"\n    for ii, vv in ipairs(v) do\n        if vv.n then\n            local tn = sub(simplifyString(vv.n),1,40)\n            if i == 4 then\n                tn = vv.sn..recoverTier(vv.t)..recoverSize(vv.s)\n                if psn ~= \"\" and psn ~= vv.sn then line = line+0.4 end\n                psn = vv.sn\n            end\n            local tnf = #tn <25 and text_small or text_smaller\n            local q = formatVolumeOrUnit(i, vv.q)\n            addText(textbox[i], tnf, \"- \"..tn, bposX[i]+5, py+line*oy+ty[i])\n            setNextTextAlign(textbox[i], AlignH_Right, AlignV_Middle)\n            addText(textbox[i], text_small, \"[\"..q..\"]\", bposX[i]+bsizeX-5, py+line*oy+ty[i])\n            if ii == #v then\n                line = 0\n            else\n                line = line + 1\n            end\n        end\n    end\nend\n\nimage = createLayer()\n\n\nlocal displayedProd = selectedProd.n and selectedProd or pinnedProd.n and pinnedProd or nil\nif displayedProd then\n    setNextFillColor(image,1,1,1,1)\n    pImage = loadImage(displayedProd.iP)\n    addImage(image, pImage, 15,515, 90.0, 90.0)\n    \n    setNextFillColor(tittles, 0.49019607843137, 0.4156862745098, 0.23921568627451, 1)\n    addText(tittles,text_big, \"> \"..displayedProd.n, 115,522)\n    \n    local px = 125\n    local line = 0\n    local oy = 15\n    local py = 515\n    local col = 0\n    local colMax = 3\n    local ox = 805/colMax\n    \n    for _, v in ipairs(displayedProd) do\n        local localQ = 0\n        local q = v.q\n        for _, vv in ipairs(containersItems) do\n            for _, vvv in ipairs(vv) do\n                if vvv.n == v.n then\n                    localQ = vvv.q\n                end\n            end\n        end\n\n        if v.q / localQ > 1 then \n            setNextFillColor(tittles, 0.35882352941176, 0.43725490196078, 0.46470588235294, 1)\n        else\n            setNextFillColor(tittles, 0.49019607843137, 0.4156862745098, 0.23921568627451, 1)\n        end\n        addText(tittles,text_smaller, \"> \"..simplifyString(v.n) , 115+col*ox, 540+line*oy)\n\n        if v.q / localQ > 1 then \n            setNextFillColor(tittles, 0.75, 0, 0, 0.75)\n        else\n            setNextFillColor(tittles, 0.49019607843137, 0.4156862745098, 0.23921568627451, 1)\n        end\n        setNextTextAlign(tittles, AlignH_Right, AlignV_Baseline)\n        addText(tittles,text_smaller, \"[\"..formatVolume(q)..\" / \"..formatVolume(localQ)..\"] <\", 115+col*ox+ox-30, 540+line*oy)\n        \n        col = col < colMax-1 and col + 1 or 0\n        line = col == 0 and line + 1 or line\n    end\nend\n\n---------------------------\n-- LAYER: loading--\nloading_big = loadFont('Play', 80)\nloadingL = createLayer()\nsetDefaultAllText(loadingL, 0.0, 0.0, 0.0, 0.0, 0, 1.0, 0.0, 0.0, 1, AlignH_Center, AlignV_Middle)\nif loading == true then\n    addText(loadingL, loading_big, \"Please stand by: loading...\", rx/2,ry/2)\n    addText(loadingL, tittle_big, \"Estimated loading time = number of connected hubs * 30sec\", rx/2,ry/2+50)\nend\n\n-----------------------\n--MASTER LAYER FOOTER--\nOS_front = createLayer() \ntime = getTime()\nrc, rcm = getRenderCost(), getRenderCostMax()\nr_c = string.format('render cost: %d / %d (%.1f%%)', rc, rcm, (rc/rcm) * 100)\nsetFontSize(text_small, 11)\nsetNextTextAlign(text_small, 0, 3)\nsetDefaultAllText(OS_front, 0.0, 0.0, 0.0, 0.0, 0, 0.35882352941176, 0.43725490196078, 0.46470588235294, 1, AlignH_Left, AlignV_Baseline)\naddText(OS_front,text_tiny,r_c..\" / refresh in: \"..math.floor(updateTime - time)..\" sec\",115,ry-3)\n\n\nrequestAnimationFrame(1)\n\n    ]]\n\n    screenHub.setRenderScript(SC2)\n    end\nend\n","filter":{"args":[],"signature":"onStart()","slotKey":"-5"},"key":"11"}],"methods":[],"events":[]}
